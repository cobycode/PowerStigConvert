<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="983" errors="0" failures="8" not-run="0" inconclusive="2" ignored="0" skipped="0" invalid="0" date="2018-04-25" time="20:02:40">
  <environment user="adamh" machine-name="X1" cwd="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit" user-domain="X1" platform="Microsoft Windows 10 Pro|C:\WINDOWS|\Device\Harddisk0\Partition3" nunit-version="2.5.8.0" os-version="10.0.16299" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="45.548" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\accountPolicyRule.tests.ps1" executed="True" result="Success" success="True" time="1.2311" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\accountPolicyRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-AccountPolicyRule" executed="True" result="Success" success="True" time="1.2311" asserts="0" description="ConvertTo-AccountPolicyRule">
            <results>
              <test-case description="Should return an AccountPolicyRule object" name="ConvertTo-AccountPolicyRule.Should return an AccountPolicyRule object" time="1.2311" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\auditPolicyRule.tests.ps1" executed="True" result="Success" success="True" time="0.39" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\auditPolicyRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-AuditPolicyRule" executed="True" result="Success" success="True" time="0.39" asserts="0" description="ConvertTo-AuditPolicyRule">
            <results>
              <test-case description="Should return an AuditPolicyRule object" name="ConvertTo-AuditPolicyRule.Should return an AuditPolicyRule object" time="0.39" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\documentRule.tests.ps1" executed="True" result="Success" success="True" time="0.1863" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\documentRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-DocumentRule" executed="True" result="Success" success="True" time="0.1863" asserts="0" description="ConvertTo-DocumentRule">
            <results>
              <test-case description="Should return an DocumentRule object" name="ConvertTo-DocumentRule.Should return an DocumentRule object" time="0.1863" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\helperFunctions.tests.ps1" executed="True" result="Success" success="True" time="0.1539" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\helperFunctions.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-AvailableId" executed="True" result="Success" success="True" time="0.1539" asserts="0" description="Get-AvailableId">
            <results>
              <test-case description="Should ad the nexy available letter to an Id" name="Get-AvailableId.Should ad the nexy available letter to an Id" time="0.1539" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\main.dscXml.tests.ps1" executed="True" result="Success" success="True" time="0.7604" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\main.dscXml.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-OrganizationalSettingsXmlFile" executed="True" result="Success" success="True" time="0.3686" asserts="0" description="New-OrganizationalSettingsXmlFile">
            <results>
              <test-case description="Should exist" name="New-OrganizationalSettingsXmlFile.Should exist" time="0.3686" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-StigVersionNumber" executed="True" result="Success" success="True" time="0.092" asserts="0" description="Get-StigVersionNumber">
            <results>
              <test-case description="Should exist" name="Get-StigVersionNumber.Should exist" time="0.092" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-StigObjectsWithOrgSettings" executed="True" result="Success" success="True" time="0.0772" asserts="0" description="Get-StigObjectsWithOrgSettings">
            <results>
              <test-case description="Should exist" name="Get-StigObjectsWithOrgSettings.Should exist" time="0.0772" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-CompositeTargetFolder" executed="True" result="Success" success="True" time="0.1603" asserts="0" description="Get-CompositeTargetFolder">
            <results>
              <test-case description="Should return 'WindowsServerDC' from 'Windows Server 2012/2012 R2 Domain Controller Security Technical Implementation Guide' " name="Get-CompositeTargetFolder.Should return 'WindowsServerDC' from 'Windows Server 2012/2012 R2 Domain Controller Security Technical Implementation Guide' " time="0.1265" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'WindowsServerMS' from 'Windows Server 2012/2012 R2 Member Server Security Technical Implementation Guide' " name="Get-CompositeTargetFolder.Should return 'WindowsServerMS' from 'Windows Server 2012/2012 R2 Member Server Security Technical Implementation Guide' " time="0.0339" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-OutputFileRoot" executed="True" result="Success" success="True" time="0.0622" asserts="0" description="Get-OutputFileRoot">
            <results>
              <test-case description="Should exist" name="Get-OutputFileRoot.Should exist" time="0.0622" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\main.report.tests.ps1" executed="True" result="Inconclusive" success="True" time="0.1055" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\main.report.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-RuleTypeList" executed="True" result="Inconclusive" success="True" time="0.1055" asserts="0" description="Get-RuleTypeList">
            <results>
              <test-case description="Should exist" name="Get-RuleTypeList.Should exist" time="0.1015" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return alphabetical list of STIG Types " name="Get-RuleTypeList.Should return alphabetical list of STIG Types " time="0.004" asserts="0" success="True" result="Inconclusive" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\main.xccdfXml.tests.ps1" executed="True" result="Failure" success="False" time="1.1349" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\main.xccdfXml.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-StigXccdfBenchmarkContent" executed="True" result="Failure" success="False" time="0.8795" asserts="0" description="Get-StigXccdfBenchmarkContent">
            <results>
              <test-case description="Should throw an error when an invalid path is given." name="Get-StigXccdfBenchmarkContent.Should throw an error when an invalid path is given." time="0.3799" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should call Get-StigContentFromZip if a zip file is provided." name="Get-StigXccdfBenchmarkContent.Should call Get-StigContentFromZip if a zip file is provided." time="0.1505" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                </failure>
              </test-case>
              <test-case description="Should call Get-Content if a xml file is provided." name="Get-StigXccdfBenchmarkContent.Should call Get-Content if a xml file is provided." time="0.1806" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                </failure>
              </test-case>
              <test-case description="Should thrown an error if the xccdf is invalid " name="Get-StigXccdfBenchmarkContent.Should thrown an error if the xccdf is invalid " time="0.1685" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-StigContentFromZip" executed="True" result="Success" success="True" time="0" asserts="0" description="Get-StigContentFromZip">
            <results />
          </test-suite>
          <test-suite type="TestFixture" name="Test-ValidXccdf" executed="True" result="Success" success="True" time="0.2554" asserts="0" description="Test-ValidXccdf">
            <results>
              <test-case description="Should return True if all requires elements are found" name="Test-ValidXccdf.Should return True if all requires elements are found" time="0.1543" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False if the title element is not found" name="Test-ValidXccdf.Should return False if the title element is not found" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False if the version element is not found" name="Test-ValidXccdf.Should return False if the version element is not found" time="0.0273" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False if the group element is not found" name="Test-ValidXccdf.Should return False if the group element is not found" time="0.0431" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\manualRule.tests.ps1" executed="True" result="Success" success="True" time="0.1713" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\manualRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-ManualRule" executed="True" result="Success" success="True" time="0.1713" asserts="0" description="ConvertTo-ManualRule">
            <results>
              <test-case description="Should return an ManualRule object" name="ConvertTo-ManualRule.Should return an ManualRule object" time="0.1713" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\permissionRule.tests.ps1" executed="True" result="Success" success="True" time="1.6138" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\permissionRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-PermissionRule" executed="True" result="Success" success="True" time="0.4263" asserts="0" description="ConvertTo-PermissionRule">
            <results>
              <test-case description="Should return an PermissionRule object" name="ConvertTo-PermissionRule.Should return an PermissionRule object" time="0.4263" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Private Permission Rule" executed="True" result="Success" success="True" time="1.1875" asserts="0" description="Private Permission Rule">
            <results>
              <test-suite type="TestFixture" name="Get-PermissionTargetPath" executed="True" result="Success" success="True" time="0.9304" asserts="0" description="Get-PermissionTargetPath">
                <results>
                  <test-case description="Should return %SystemDrive%\ from system drive's root directory" name="Private Permission Rule.Get-PermissionTargetPath.Should return %SystemDrive%\ from system drive's root directory" time="0.1255" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %SystemDrive%\ from system drive's root directory " name="Private Permission Rule.Get-PermissionTargetPath.Should return %SystemDrive%\ from system drive's root directory " time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %SystemDrive%\ from  system drive's root directory" name="Private Permission Rule.Get-PermissionTargetPath.Should return %SystemDrive%\ from  system drive's root directory" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\eventvwr.exe from eventvwr.exe" name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\eventvwr.exe from eventvwr.exe" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\eventvwr.exe from  eventvwr.exe" name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\eventvwr.exe from  eventvwr.exe" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\eventvwr.exe from eventvwr.exe " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\eventvwr.exe from eventvwr.exe " time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\eventvwr.exe from  The event viewer is eventvwr.exe " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\eventvwr.exe from  The event viewer is eventvwr.exe " time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS " time="0.0455" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS " time="0.013" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS " time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS " time="0.0323" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS " time="0.0461" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS " time="0.1487" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS" name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS" time="0.0934" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS" name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS" time="0.1025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS" name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from   %SystemRoot%\SYSTEM32\WINEVT\LOGS" time="0.1075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS  " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS  " time="0.0206" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS  " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS  " time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS  " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from %SystemRoot%\SYSTEM32\WINEVT\LOGS  " time="0.016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from The eventlog directory is %SystemRoot%\SYSTEM32\WINEVT\LOGS period. " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Security.evtx from The eventlog directory is %SystemRoot%\SYSTEM32\WINEVT\LOGS period. " time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from The eventlog directory is %SystemRoot%\SYSTEM32\WINEVT\LOGS period. " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\Application.evtx from The eventlog directory is %SystemRoot%\SYSTEM32\WINEVT\LOGS period. " time="0.022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from The eventlog directory is %SystemRoot%\SYSTEM32\WINEVT\LOGS period. " name="Private Permission Rule.Get-PermissionTargetPath.Should return %windir%\SYSTEM32\WINEVT\LOGS\System.evtx from The eventlog directory is %SystemRoot%\SYSTEM32\WINEVT\LOGS period. " time="0.0671" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertTo-AccessControlEntry" executed="True" result="Success" success="True" time="0.2571" asserts="0" description="ConvertTo-AccessControlEntry">
                <results>
                  <test-case description="Should return a principal count of 4" name="Private Permission Rule.ConvertTo-AccessControlEntry.Should return a principal count of 4" time="0.1288" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have matching Values" name="Private Permission Rule.ConvertTo-AccessControlEntry.Should have matching Values" time="0.0595" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should assign different permissions" name="Private Permission Rule.ConvertTo-AccessControlEntry.Should assign different permissions" time="0.0286" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have matching Inheritance values" name="Private Permission Rule.ConvertTo-AccessControlEntry.Should have matching Inheritance values" time="0.0402" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\processMitigationRule.tests.ps1" executed="True" result="Success" success="True" time="0.2786" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\processMitigationRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-ProcessMitigationRule" executed="True" result="Success" success="True" time="0.2786" asserts="0" description="ConvertTo-ProcessMitigationRule">
            <results>
              <test-case description="Should return a ProcessMitigationRule object" name="ConvertTo-ProcessMitigationRule.Should return a ProcessMitigationRule object" time="0.2786" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\rangeConversion.tests.ps1" executed="True" result="Success" success="True" time="3.5197" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\rangeConversion.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-OrganizationValueTestString" executed="True" result="Success" success="True" time="0.3957" asserts="0" description="Get-OrganizationValueTestString">
            <results>
              <test-suite type="TestFixture" name="NegativeOr" executed="True" result="Success" success="True" time="0.1693" asserts="0" description="NegativeOr">
                <results>
                  <test-case description="Should return the correct string" name="Get-OrganizationValueTestString.NegativeOr.Should return the correct string" time="0.1693" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Should exist" name="Get-OrganizationValueTestString.Should exist" time="0.2264" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-TestStringTokenNumbers" executed="True" result="Success" success="True" time="0.284" asserts="0" description="Get-TestStringTokenNumbers">
            <results>
              <test-case description="Should exist" name="Get-TestStringTokenNumbers.Should exist" time="0.1383" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30' when given 'less than 30'" name="Get-TestStringTokenNumbers.Should return '30' when given 'less than 30'" time="0.0315" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '32768' when given '0x00008000 (32768) (or greater)'" name="Get-TestStringTokenNumbers.Should return '32768' when given '0x00008000 (32768) (or greater)'" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30 60' when given '30 (or greater, but not 60)'" name="Get-TestStringTokenNumbers.Should return '30 60' when given '30 (or greater, but not 60)'" time="0.01" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '15' when given '0x0000000f (15) (or less)'" name="Get-TestStringTokenNumbers.Should return '15' when given '0x0000000f (15) (or less)'" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30 0' when given '30 (or less, but not 0)'" name="Get-TestStringTokenNumbers.Should return '30 0' when given '30 (or less, but not 0)'" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30' when given '30 (or less)'" name="Get-TestStringTokenNumbers.Should return '30' when given '30 (or less)'" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30 60' when given 'Greater than 30 (but not 60)'" name="Get-TestStringTokenNumbers.Should return '30 60' when given 'Greater than 30 (but not 60)'" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30 0' when given 'Less than 30 (but not 0)'" name="Get-TestStringTokenNumbers.Should return '30 0' when given 'Less than 30 (but not 0)'" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30' when given 'Greater than 30'" name="Get-TestStringTokenNumbers.Should return '30' when given 'Greater than 30'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '30' when given '30 (or greater)'" name="Get-TestStringTokenNumbers.Should return '30' when given '30 (or greater)'" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-TestStringTokenList" executed="True" result="Success" success="True" time="0.2735" asserts="0" description="Get-TestStringTokenList">
            <results>
              <test-suite type="TestFixture" name="CommandTokens ParameterSet" executed="True" result="Success" success="True" time="0.1449" asserts="0" description="CommandTokens ParameterSet">
                <results>
                  <test-case description="Should return 'less than' when given 'less than 30'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'less than' when given 'less than 30'" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'or greater' when given '0x00008000 (32768) (or greater)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'or greater' when given '0x00008000 (32768) (or greater)'" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'or greater but not' when given '30 (or greater, but not 60)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'or greater but not' when given '30 (or greater, but not 60)'" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'or less' when given ' 0x0000000f (15) (or less)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'or less' when given ' 0x0000000f (15) (or less)'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'or less but not' when given '30 (or less, but not 0)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'or less but not' when given '30 (or less, but not 0)'" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'or less' when given '30 (or less)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'or less' when given '30 (or less)'" time="0.013" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'greater than but not' when given 'Greater than 30 (but not 60)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'greater than but not' when given 'Greater than 30 (but not 60)'" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'less than but not' when given 'Less than 30 (but not 0)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'less than but not' when given 'Less than 30 (but not 0)'" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'greater than' when given 'Greater than 30'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'greater than' when given 'Greater than 30'" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'or greater' when given '30 (or greater)'" name="Get-TestStringTokenList.CommandTokens ParameterSet.Should return 'or greater' when given '30 (or greater)'" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StringTokens ParameterSet" executed="True" result="Success" success="True" time="0.0818" asserts="0" description="StringTokens ParameterSet">
                <results>
                  <test-case description="Should return 'text1 text2 text3' when given '&quot;text1&quot; and &quot;text2&quot; but &quot;text3&quot; are between quotes'" name="Get-TestStringTokenList.StringTokens ParameterSet.Should return 'text1 text2 text3' when given '&quot;text1&quot; and &quot;text2&quot; but &quot;text3&quot; are between quotes'" time="0.0616" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'text1' when given '&quot;text1&quot; is between quotes'" name="Get-TestStringTokenList.StringTokens ParameterSet.Should return 'text1' when given '&quot;text1&quot; is between quotes'" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'text1 text2' when given '&quot;text1&quot; and &quot;text2&quot; are between quotes'" name="Get-TestStringTokenList.StringTokens ParameterSet.Should return 'text1 text2' when given '&quot;text1&quot; and &quot;text2&quot; are between quotes'" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Should exist" name="Get-TestStringTokenList.Should exist" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConvertTo-TestString" executed="True" result="Success" success="True" time="0.3007" asserts="0" description="ConvertTo-TestString">
            <results>
              <test-case description="Should return '{0} -lt '30'' when given 'less than 30'" name="ConvertTo-TestString.Should return '{0} -lt '30'' when given 'less than 30'" time="0.0852" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -ge '32768'' when given '0x00008000 (32768) (or greater)'" name="ConvertTo-TestString.Should return '{0} -ge '32768'' when given '0x00008000 (32768) (or greater)'" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -le '15'' when given '  0x0000000f (15) (or less)'" name="ConvertTo-TestString.Should return '{0} -le '15'' when given '  0x0000000f (15) (or less)'" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -ge '30' -and {0} -lt '60'' when given '30 (or greater, but not 60)'" name="ConvertTo-TestString.Should return '{0} -ge '30' -and {0} -lt '60'' when given '30 (or greater, but not 60)'" time="0.0384" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -le '30' -and {0} -gt '0'' when given '30 (or less, but not 0)'" name="ConvertTo-TestString.Should return '{0} -le '30' -and {0} -gt '0'' when given '30 (or less, but not 0)'" time="0.03" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -le '30'' when given '30 (or less)'" name="ConvertTo-TestString.Should return '{0} -le '30'' when given '30 (or less)'" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -gt '30' -and {0} -lt '60'' when given 'Greater than 30 (but not 60)'" name="ConvertTo-TestString.Should return '{0} -gt '30' -and {0} -lt '60'' when given 'Greater than 30 (but not 60)'" time="0.0397" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -lt '30' -and {0} -gt '0'' when given 'Less than 30 (but not 0)'" name="ConvertTo-TestString.Should return '{0} -lt '30' -and {0} -gt '0'' when given 'Less than 30 (but not 0)'" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -gt '30'' when given 'Greater than 30'" name="ConvertTo-TestString.Should return '{0} -gt '30'' when given 'Greater than 30'" time="0.0171" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '{0} -ge '30'' when given '30 (or greater)'" name="ConvertTo-TestString.Should return '{0} -ge '30'' when given '30 (or greater)'" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsNegativeOr" executed="True" result="Success" success="True" time="0.2624" asserts="0" description="Test-StringIsNegativeOr">
            <results>
              <test-case description="Verifies the function exists" name="Test-StringIsNegativeOr.Verifies the function exists" time="0.0904" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 or 2 = a Finding'" name="Test-StringIsNegativeOr.Should be true with '1 or 2 = a Finding'" time="0.0199" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '10 or 20 = a Finding'" name="Test-StringIsNegativeOr.Should be true with '10 or 20 = a Finding'" time="0.011" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with ' 1 or 2 = a Finding'" name="Test-StringIsNegativeOr.Should be true with ' 1 or 2 = a Finding'" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 or 2 = a Finding '" name="Test-StringIsNegativeOr.Should be true with '1 or 2 = a Finding '" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with ' 1 or 2 = a Finding '" name="Test-StringIsNegativeOr.Should be true with ' 1 or 2 = a Finding '" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1  or  2  =  a  Finding'" name="Test-StringIsNegativeOr.Should be true with '1  or  2  =  a  Finding'" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1or2 = a Finding'" name="Test-StringIsNegativeOr.Should be true with '1or2 = a Finding'" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1or2=a Finding'" name="Test-StringIsNegativeOr.Should be true with '1or2=a Finding'" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1or2=aFinding'" name="Test-StringIsNegativeOr.Should be true with '1or2=aFinding'" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be false with '1 or 2 = is not a Finding'" name="Test-StringIsNegativeOr.Should be false with '1 or 2 = is not a Finding'" time="0.03" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be false with '1 or 2'" name="Test-StringIsNegativeOr.Should be false with '1 or 2'" time="0.009" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be false with '2'" name="Test-StringIsNegativeOr.Should be false with '2'" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be false with 'greater than 1'" name="Test-StringIsNegativeOr.Should be false with 'greater than 1'" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsPositiveOr" executed="True" result="Success" success="True" time="0.2205" asserts="0" description="Test-StringIsPositiveOr">
            <results>
              <test-case description="Verifies the function exists" name="Test-StringIsPositiveOr.Verifies the function exists" time="0.0726" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 (Lock Workstation) or 2 (Force Logoff)'" name="Test-StringIsPositiveOr.Should be true with '1 (Lock Workstation) or 2 (Force Logoff)'" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 ( Lock Workstation ) or 2 ( Force Logoff )'" name="Test-StringIsPositiveOr.Should be true with '1 ( Lock Workstation ) or 2 ( Force Logoff )'" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1(Lock Workstation)or2(Force Logoff)'" name="Test-StringIsPositiveOr.Should be true with '1(Lock Workstation)or2(Force Logoff)'" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 (Lock) or 2 (Logoff)'" name="Test-StringIsPositiveOr.Should be true with '1 (Lock) or 2 (Logoff)'" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 (Lock ) or 2 ( Logoff)'" name="Test-StringIsPositiveOr.Should be true with '1 (Lock ) or 2 ( Logoff)'" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 ( Lock) or 2 (Logoff )'" name="Test-StringIsPositiveOr.Should be true with '1 ( Lock) or 2 (Logoff )'" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 (Lock Workstation) or 2 (Force Logoff)'" name="Test-StringIsPositiveOr.Should be true with '1 (Lock Workstation) or 2 (Force Logoff)'" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 Lock Workstation or 2 Force Logoff'" name="Test-StringIsPositiveOr.Should be true with '1 Lock Workstation or 2 Force Logoff'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 'Lock Workstation' or 2 'Force Logoff''" name="Test-StringIsPositiveOr.Should be true with '1 'Lock Workstation' or 2 'Force Logoff''" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 or 2'" name="Test-StringIsPositiveOr.Should be true with '1 or 2'" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be true with '1 or 2 = is not a Finding'" name="Test-StringIsPositiveOr.Should be true with '1 or 2 = is not a Finding'" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be false with '2'" name="Test-StringIsPositiveOr.Should be false with '2'" time="0.0221" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be false with 'greater than 1'" name="Test-StringIsPositiveOr.Should be false with 'greater than 1'" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be false with 'Less than 10'" name="Test-StringIsPositiveOr.Should be false with 'Less than 10'" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConvertTo-OrTestString" executed="True" result="Success" success="True" time="0.3792" asserts="0" description="ConvertTo-OrTestString">
            <results>
              <test-suite type="TestFixture" name="NotMatch" executed="True" result="Success" success="True" time="0.1584" asserts="0" description="NotMatch">
                <results>
                  <test-case description="Should return '{0} -notmatch '10|20'' from '10 or 20 = a Finding'" name="ConvertTo-OrTestString.NotMatch.Should return '{0} -notmatch '10|20'' from '10 or 20 = a Finding'" time="0.0729" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '{0} -notmatch '1|2'' from '1 or 2 = a Finding'" name="ConvertTo-OrTestString.NotMatch.Should return '{0} -notmatch '1|2'' from '1 or 2 = a Finding'" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should throw an error if not a valid string" name="ConvertTo-OrTestString.NotMatch.Should throw an error if not a valid string" time="0.0733" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Match" executed="True" result="Success" success="True" time="0.1464" asserts="0" description="Match">
                <results>
                  <test-case description="Should return '{0} -match '10|20'' from '10 or 20 '" name="ConvertTo-OrTestString.Match.Should return '{0} -match '10|20'' from '10 or 20 '" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '{0} -match '1|2'' from '1 (Lock Workstation) or 2 (Force Logoff)'" name="ConvertTo-OrTestString.Match.Should return '{0} -match '1|2'' from '1 (Lock Workstation) or 2 (Force Logoff)'" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '{0} -match '1|2'' from '1 or 2 '" name="ConvertTo-OrTestString.Match.Should return '{0} -match '1|2'' from '1 or 2 '" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should throw an error if not a valid string" name="ConvertTo-OrTestString.Match.Should throw an error if not a valid string" time="0.0731" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Should exist" name="ConvertTo-OrTestString.Should exist" time="0.0744" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsGreaterThan" executed="True" result="Success" success="True" time="0.0627" asserts="0" description="Test-StringIsGreaterThan">
            <results>
              <test-case description="Should return True when given 'Greater than 30'" name="Test-StringIsGreaterThan.Should return True when given 'Greater than 30'" time="0.0627" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsGreaterThanOrEqual" executed="True" result="Success" success="True" time="0.1935" asserts="0" description="Test-StringIsGreaterThanOrEqual">
            <results>
              <test-case description="Should return True when given '30 (or greater)'" name="Test-StringIsGreaterThanOrEqual.Should return True when given '30 (or greater)'" time="0.1093" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 30 (or greater)'" name="Test-StringIsGreaterThanOrEqual.Should return True when given ' 30 (or greater)'" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 30 (or greater) '" name="Test-StringIsGreaterThanOrEqual.Should return True when given ' 30 (or greater) '" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given '0x00008000 (32768) (or greater)'" name="Test-StringIsGreaterThanOrEqual.Should return True when given '0x00008000 (32768) (or greater)'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x00008000 (32768) (or greater)'" name="Test-StringIsGreaterThanOrEqual.Should return True when given ' 0x00008000 (32768) (or greater)'" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x00008000 (32768) (or greater) '" name="Test-StringIsGreaterThanOrEqual.Should return True when given ' 0x00008000 (32768) (or greater) '" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given '0x0000000f (15) (or greater)'" name="Test-StringIsGreaterThanOrEqual.Should return True when given '0x0000000f (15) (or greater)'" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x0000000f (15) (or greater)'" name="Test-StringIsGreaterThanOrEqual.Should return True when given ' 0x0000000f (15) (or greater)'" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x0000000f (15) (or greater) '" name="Test-StringIsGreaterThanOrEqual.Should return True when given ' 0x0000000f (15) (or greater) '" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsGreaterThanButNot" executed="True" result="Success" success="True" time="0.0597" asserts="0" description="Test-StringIsGreaterThanButNot">
            <results>
              <test-case description="Should return True when given 'Greater than 30 (but not 100)'" name="Test-StringIsGreaterThanButNot.Should return True when given 'Greater than 30 (but not 100)'" time="0.0597" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsGreaterThanOrEqualButNot" executed="True" result="Success" success="True" time="0.05" asserts="0" description="Test-StringIsGreaterThanOrEqualButNot">
            <results>
              <test-case description="Should return True when given '30 (or greater, but not 100)'" name="Test-StringIsGreaterThanOrEqualButNot.Should return True when given '30 (or greater, but not 100)'" time="0.05" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsLessThan" executed="True" result="Success" success="True" time="0.0724" asserts="0" description="Test-StringIsLessThan">
            <results>
              <test-case description="Should return True when given 'less than 90'" name="Test-StringIsLessThan.Should return True when given 'less than 90'" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' less than 90'" name="Test-StringIsLessThan.Should return True when given ' less than 90'" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' less than 90 '" name="Test-StringIsLessThan.Should return True when given ' less than 90 '" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsLessThanOrEqual" executed="True" result="Success" success="True" time="0.1247" asserts="0" description="Test-StringIsLessThanOrEqual">
            <results>
              <test-case description="Should return True when given '90 (or less)'" name="Test-StringIsLessThanOrEqual.Should return True when given '90 (or less)'" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 90 (or less)'" name="Test-StringIsLessThanOrEqual.Should return True when given ' 90 (or less)'" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 90 (or less) '" name="Test-StringIsLessThanOrEqual.Should return True when given ' 90 (or less) '" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given '0x00000384 (900) (or less)'" name="Test-StringIsLessThanOrEqual.Should return True when given '0x00000384 (900) (or less)'" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x00000384 (900) (or less)'" name="Test-StringIsLessThanOrEqual.Should return True when given ' 0x00000384 (900) (or less)'" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x00000384 (900) (or less) '" name="Test-StringIsLessThanOrEqual.Should return True when given ' 0x00000384 (900) (or less) '" time="0.013" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given '0x0000000f (15) (or less)'" name="Test-StringIsLessThanOrEqual.Should return True when given '0x0000000f (15) (or less)'" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x0000000f (15) (or less)'" name="Test-StringIsLessThanOrEqual.Should return True when given ' 0x0000000f (15) (or less)'" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 0x0000000f (15) (or less) '" name="Test-StringIsLessThanOrEqual.Should return True when given ' 0x0000000f (15) (or less) '" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsLessThanButNot" executed="True" result="Success" success="True" time="0.0707" asserts="0" description="Test-StringIsLessThanButNot">
            <results>
              <test-case description="Should return True when given 'less than 30 (but not 0)'" name="Test-StringIsLessThanButNot.Should return True when given 'less than 30 (but not 0)'" time="0.0707" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsLessThanOrEqualButNot" executed="True" result="Success" success="True" time="0.0963" asserts="0" description="Test-StringIsLessThanOrEqualButNot">
            <results>
              <test-case description="Should return True when given '30 (or less, but not 0)'" name="Test-StringIsLessThanOrEqualButNot.Should return True when given '30 (or less, but not 0)'" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 30 (or less, but not 0)'" name="Test-StringIsLessThanOrEqualButNot.Should return True when given ' 30 (or less, but not 0)'" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 30 (or less, but not 0) '" name="Test-StringIsLessThanOrEqualButNot.Should return True when given ' 30 (or less, but not 0) '" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given '3 (or less, but not 1)'" name="Test-StringIsLessThanOrEqualButNot.Should return True when given '3 (or less, but not 1)'" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 3 (or less, but not 1)'" name="Test-StringIsLessThanOrEqualButNot.Should return True when given ' 3 (or less, but not 1)'" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given ' 3 (or less, but not 1) '" name="Test-StringIsLessThanOrEqualButNot.Should return True when given ' 3 (or less, but not 1) '" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-StringIsMultipleValue" executed="True" result="Success" success="True" time="0.1107" asserts="0" description="Test-StringIsMultipleValue">
            <results>
              <test-case description="Should return True when given 'Possible values are NoSync, NTP, NT5DS, AllSync'" name="Test-StringIsMultipleValue.Should return True when given 'Possible values are NoSync, NTP, NT5DS, AllSync'" time="0.1107" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConvertTo-MultipleValue" executed="True" result="Success" success="True" time="0.0814" asserts="0" description="ConvertTo-MultipleValue">
            <results>
              <test-case description="Should return ''{0}' -match '^(orange|lemon|cherry)$'' when given 'Possible values are orange, lemon, cherry'" name="ConvertTo-MultipleValue.Should return ''{0}' -match '^(orange|lemon|cherry)$'' when given 'Possible values are orange, lemon, cherry'" time="0.0814" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-SecurityPolicyString" executed="True" result="Success" success="True" time="0.0545" asserts="0" description="Get-SecurityPolicyString">
            <results>
              <test-case description="Should return the second string in quotes" name="Get-SecurityPolicyString.Should return the second string in quotes" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-SecurityPolicyContainsRange" executed="True" result="Success" success="True" time="0.2544" asserts="0" description="Test-SecurityPolicyContainsRange">
            <results>
              <test-suite type="TestFixture" name="Match" executed="True" result="Success" success="True" time="0.1721" asserts="0" description="Match">
                <results>
                  <test-case description="Should return true from 'If the &quot;Reset account lockout counter after&quot; value is less than &quot;15&quot; minutes, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the &quot;Reset account lockout counter after&quot; value is less than &quot;15&quot; minutes, this is a finding.'" time="0.0835" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for &quot;Enforce password history&quot; is less than &quot;24&quot; passwords remembered, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for &quot;Enforce password history&quot; is less than &quot;24&quot; passwords remembered, this is a finding.'" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the &quot;Account lockout threshold&quot; is &quot;0&quot; or more than &quot;3&quot; attempts, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the &quot;Account lockout threshold&quot; is &quot;0&quot; or more than &quot;3&quot; attempts, this is a finding.'" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the &quot;Account lockout duration&quot; is less than &quot;15&quot; minutes (excluding &quot;0&quot;), this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the &quot;Account lockout duration&quot; is less than &quot;15&quot; minutes (excluding &quot;0&quot;), this is a finding.'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for the &quot;Minimum password length,&quot; is less than &quot;14&quot; characters, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for the &quot;Minimum password length,&quot; is less than &quot;14&quot; characters, this is a finding.'" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for the &quot;Minimum password age&quot; is set to &quot;0&quot; days (&quot;Password can be changed immediately.&quot;), this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for the &quot;Minimum password age&quot; is set to &quot;0&quot; days (&quot;Password can be changed immediately.&quot;), this is a finding.'" time="0.0171" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for the &quot;Maximum password age&quot; is greater than &quot;60&quot; days, this is a finding.  If the value is set to &quot;0&quot; (never expires), this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for the &quot;Maximum password age&quot; is greater than &quot;60&quot; days, this is a finding.  If the value is set to &quot;0&quot; (never expires), this is a finding.'" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for &quot;Accounts: Rename administrator account&quot; is not set to a value other than &quot;Administrator&quot;, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for &quot;Accounts: Rename administrator account&quot; is not set to a value other than &quot;Administrator&quot;, this is a finding.'" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Not Match" executed="True" result="Success" success="True" time="0.0822" asserts="0" description="Not Match">
                <results>
                  <test-case description="Should return false from 'If the value for &quot;Password must meet complexity requirements&quot; is not set to &quot;Enabled&quot;, this is a finding.'" name="Test-SecurityPolicyContainsRange.Not Match.Should return false from 'If the value for &quot;Password must meet complexity requirements&quot; is not set to &quot;Enabled&quot;, this is a finding.'" time="0.0578" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false from 'If the value for &quot;Store password using reversible encryption&quot; is not set to &quot;Disabled&quot;, this is a finding.'" name="Test-SecurityPolicyContainsRange.Not Match.Should return false from 'If the value for &quot;Store password using reversible encryption&quot; is not set to &quot;Disabled&quot;, this is a finding.'" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false from 'If the &quot;Account lockout duration&quot; is not set to &quot;0&quot;, requiring an administrator to unlock the account, this is a finding.'" name="Test-SecurityPolicyContainsRange.Not Match.Should return false from 'If the &quot;Account lockout duration&quot; is not set to &quot;0&quot;, requiring an administrator to unlock the account, this is a finding.'" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-SecurityPolicyOrganizationValueTestString" executed="True" result="Success" success="True" time="0.1727" asserts="0" description="Get-SecurityPolicyOrganizationValueTestString">
            <results>
              <test-case description="Should return ('{0}' -ge '15' -or '{0}' -eq '0') from 'If the &quot;Account lockout duration&quot; is less than &quot;15&quot; minutes (excluding &quot;0&quot;), this is a finding.'" name="Get-SecurityPolicyOrganizationValueTestString.Should return ('{0}' -ge '15' -or '{0}' -eq '0') from 'If the &quot;Account lockout duration&quot; is less than &quot;15&quot; minutes (excluding &quot;0&quot;), this is a finding.'" time="0.0741" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return ('{0}' -le '60' -and '{0}' -ne '0') from 'If the value for the &quot;Maximum password age&quot; is greater than &quot;60&quot; days, this is a finding.  If the value is set to &quot;0&quot; (never expires), this is a finding.'" name="Get-SecurityPolicyOrganizationValueTestString.Should return ('{0}' -le '60' -and '{0}' -ne '0') from 'If the value for the &quot;Maximum password age&quot; is greater than &quot;60&quot; days, this is a finding.  If the value is set to &quot;0&quot; (never expires), this is a finding.'" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return ('{0}' -ne '0') from 'If the value for the &quot;Minimum password age&quot; is set to &quot;0&quot; days (&quot;Password can be changed immediately.&quot;), this is a finding.'" name="Get-SecurityPolicyOrganizationValueTestString.Should return ('{0}' -ne '0') from 'If the value for the &quot;Minimum password age&quot; is set to &quot;0&quot; days (&quot;Password can be changed immediately.&quot;), this is a finding.'" time="0.0222" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return ('{0}' -ge '15') from 'If the &quot;Reset account lockout counter after&quot; value is less than &quot;15&quot; minutes , this is a finding.'" name="Get-SecurityPolicyOrganizationValueTestString.Should return ('{0}' -ge '15') from 'If the &quot;Reset account lockout counter after&quot; value is less than &quot;15&quot; minutes , this is a finding.'" time="0.0192" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return ('{0}' -le '3' -and '{0}' -ne '0') from 'If the &quot;Account lockout threshold&quot; is &quot;0&quot; or more than &quot;3&quot; attempts, this is a finding.'" name="Get-SecurityPolicyOrganizationValueTestString.Should return ('{0}' -le '3' -and '{0}' -ne '0') from 'If the &quot;Account lockout threshold&quot; is &quot;0&quot; or more than &quot;3&quot; attempts, this is a finding.'" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw if a match is not found" name="Get-SecurityPolicyOrganizationValueTestString.Should throw if a match is not found" time="0.0329" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\registryRule.tests.ps1" executed="True" result="Failure" success="False" time="5.6621" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\registryRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-RegistryRule" executed="True" result="Success" success="True" time="0.3882" asserts="0" description="ConvertTo-RegistryRule">
            <results>
              <test-case description="Should return an RegistryRule object" name="ConvertTo-RegistryRule.Should return an RegistryRule object" time="0.3882" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryKey" executed="True" result="Failure" success="False" time="0.3742" asserts="0" description="Get-RegistryKey">
            <results>
              <test-suite type="TestFixture" name="Windows STIG" executed="True" result="Failure" success="False" time="0.1967" asserts="0" description="Windows STIG">
                <results>
                  <test-case description="Should return the correct path" name="Get-RegistryKey.Windows STIG.Should return the correct path" time="0.1967" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Office STIG" executed="True" result="Failure" success="False" time="0.1775" asserts="0" description="Office STIG">
                <results>
                  <test-case description="Should return the correct HKCU path" name="Get-RegistryKey.Office STIG.Should return the correct HKCU path" time="0.1372" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="Should return the correct HKLM path" name="Get-RegistryKey.Office STIG.Should return the correct HKLM path" time="0.0403" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryHiveFromWindowsStig" executed="True" result="Success" success="True" time="0.2139" asserts="0" description="Get-RegistryHiveFromWindowsStig">
            <results>
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from 'Registry Hive:HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from 'Registry Hive:HKEY_LOCAL_MACHINE'" time="0.0705" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from 'Registry Hive: HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from 'Registry Hive: HKEY_LOCAL_MACHINE'" time="0.014" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from ' Registry Hive: HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from ' Registry Hive: HKEY_LOCAL_MACHINE'" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from ' Registry Hive:  HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from ' Registry Hive:  HKEY_LOCAL_MACHINE'" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from 'Hive:HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from 'Hive:HKEY_LOCAL_MACHINE'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from 'Hive: HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from 'Hive: HKEY_LOCAL_MACHINE'" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from 'Hive:  HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from 'Hive:  HKEY_LOCAL_MACHINE'" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from ' Hive:HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from ' Hive:HKEY_LOCAL_MACHINE'" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from ' Hive:HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from ' Hive:HKEY_LOCAL_MACHINE'" time="0.0208" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should return 'HKEY_LOCAL_MACHINE' from ' Hive:  HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig. Should return 'HKEY_LOCAL_MACHINE' from ' Hive:  HKEY_LOCAL_MACHINE'" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
              <test-case description=" Should throw an error when a hive is not found" name="Get-RegistryHiveFromWindowsStig. Should throw an error when a hive is not found" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryPathFromWindowsStig" executed="True" result="Success" success="True" time="0.4211" asserts="0" description="Get-RegistryPathFromWindowsStig">
            <results>
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from 'Registry Path: \SYSTEM\CurrentControlSet\'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from 'Registry Path: \SYSTEM\CurrentControlSet\'" time="0.0775" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Registry Path: SYSTEM\CurrentControlSet\'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Registry Path: SYSTEM\CurrentControlSet\'" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from 'Registry Path:  \SYSTEM\CurrentControlSet\'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from 'Registry Path:  \SYSTEM\CurrentControlSet\'" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Registry Path:  SYSTEM\CurrentControlSet\'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Registry Path:  SYSTEM\CurrentControlSet\'" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from 'Path: \SYSTEM\CurrentControlSet\'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from 'Path: \SYSTEM\CurrentControlSet\'" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Path: SYSTEM\CurrentControlSet\'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Path: SYSTEM\CurrentControlSet\'" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Path:  SYSTEM\CurrentControlSet\'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Path:  SYSTEM\CurrentControlSet\'" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from 'Path: \SYSTEM\CurrentControlSet'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from 'Path: \SYSTEM\CurrentControlSet'" time="0.009" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Path: SYSTEM\CurrentControlSet'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Path: SYSTEM\CurrentControlSet'" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Path:  SYSTEM\CurrentControlSet'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Path:  SYSTEM\CurrentControlSet'" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from 'Subkey: \SYSTEM\CurrentControlSet'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from 'Subkey: \SYSTEM\CurrentControlSet'" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Subkey: SYSTEM\CurrentControlSet'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Subkey: SYSTEM\CurrentControlSet'" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet' from ' Subkey:  SYSTEM\CurrentControlSet'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet' from ' Subkey:  SYSTEM\CurrentControlSet'" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return path with typo and formated correctly" name="Get-RegistryPathFromWindowsStig.Should return path with typo and formated correctly" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Registry Path: SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Registry Path: SYSTEM'" time="0.0361" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Registry Path: \SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Registry Path: \SYSTEM'" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Registry Path: \SYSTEM\'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Registry Path: \SYSTEM\'" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Path: SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Path: SYSTEM'" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given ' Path: SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given ' Path: SYSTEM'" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Path: \SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Path: \SYSTEM'" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Path:  \SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Path:  \SYSTEM'" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Path: \SYSTEM\'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Path: \SYSTEM\'" time="0.016" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Subkey: SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Subkey: SYSTEM'" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Subkey:  SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Subkey:  SYSTEM'" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Subkey: \SYSTEM'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Subkey: \SYSTEM'" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given 'Subkey: \SYSTEM\'" name="Get-RegistryPathFromWindowsStig.Should throw an error when given 'Subkey: \SYSTEM\'" time="0.0182" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueType" executed="True" result="Failure" success="False" time="0.7336" asserts="0" description="Get-RegistryValueType">
            <results>
              <test-suite type="TestFixture" name="Windows STIG" executed="True" result="Failure" success="False" time="0.6535" asserts="0" description="Windows STIG">
                <results>
                  <test-case description="Should call Get-RegistryValueTypeFromWindowsStig when a Windows STIG is given" name="Get-RegistryValueType.Windows STIG.Should call Get-RegistryValueTypeFromWindowsStig when a Windows STIG is given" time="0.1621" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="Should accept 'REG_SZ' and return 'String'" name="Get-RegistryValueType.Windows STIG.Should accept 'REG_SZ' and return 'String'" time="0.1084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should accept 'REG_BINARY' and return 'Binary'" name="Get-RegistryValueType.Windows STIG.Should accept 'REG_BINARY' and return 'Binary'" time="0.0835" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should accept 'REG_DWORD' and return 'Dword'" name="Get-RegistryValueType.Windows STIG.Should accept 'REG_DWORD' and return 'Dword'" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should accept 'REG_QWORD' and return 'Qword'" name="Get-RegistryValueType.Windows STIG.Should accept 'REG_QWORD' and return 'Qword'" time="0.0426" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should accept 'REG_MULTI_SZ' and return 'MultiString'" name="Get-RegistryValueType.Windows STIG.Should accept 'REG_MULTI_SZ' and return 'MultiString'" time="0.058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should accept 'REG_EXPAND_SZ' and return 'ExpandableString'" name="Get-RegistryValueType.Windows STIG.Should accept 'REG_EXPAND_SZ' and return 'ExpandableString'" time="0.0909" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'null' with invalid registry type" name="Get-RegistryValueType.Windows STIG.Should return 'null' with invalid registry type" time="0.0635" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Office STIG" executed="True" result="Failure" success="False" time="0.0801" asserts="0" description="Office STIG">
                <results>
                  <test-case description="Should call Get-RegistryValueTypeFromSingleLineStig when an Office STIG is given" name="Get-RegistryValueType.Office STIG.Should call Get-RegistryValueTypeFromSingleLineStig when an Office STIG is given" time="0.0801" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueTypeFromWindowsStig" executed="True" result="Success" success="True" time="0.0586" asserts="0" description="Get-RegistryValueTypeFromWindowsStig">
            <results>
              <test-case description="Should return 'REG_Type' from 'Type: REG_SZ'" name="Get-RegistryValueTypeFromWindowsStig.Should return 'REG_Type' from 'Type: REG_SZ'" time="0.0586" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueName" executed="True" result="Success" success="True" time="0.2216" asserts="0" description="Get-RegistryValueName">
            <results>
              <test-suite type="TestFixture" name="Windows STIG" executed="True" result="Success" success="True" time="0.1224" asserts="0" description="Windows STIG">
                <results>
                  <test-case description="Should return ValueName" name="Get-RegistryValueName.Windows STIG.Should return ValueName" time="0.1224" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Office STIG" executed="True" result="Success" success="True" time="0.0991" asserts="0" description="Office STIG">
                <results>
                  <test-case description="Should return ValueName" name="Get-RegistryValueName.Office STIG.Should return ValueName" time="0.0991" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueNameFromWindowsStig" executed="True" result="Success" success="True" time="0.0846" asserts="0" description="Get-RegistryValueNameFromWindowsStig">
            <results>
              <test-case description="Should return 'ValueName' from 'Value Name: ValueName'" name="Get-RegistryValueNameFromWindowsStig.Should return 'ValueName' from 'Value Name: ValueName'" time="0.0569" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'ValueName' from ' Value Name: ValueName'" name="Get-RegistryValueNameFromWindowsStig.Should return 'ValueName' from ' Value Name: ValueName'" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'ValueName' from ' Value Name:  ValueName'" name="Get-RegistryValueNameFromWindowsStig.Should return 'ValueName' from ' Value Name:  ValueName'" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'ValueName' from 'Value Name:   ValueName'" name="Get-RegistryValueNameFromWindowsStig.Should return 'ValueName' from 'Value Name:   ValueName'" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueData" executed="True" result="Failure" success="False" time="0.2744" asserts="0" description="Get-RegistryValueData">
            <results>
              <test-suite type="TestFixture" name="Windows STIG" executed="True" result="Failure" success="False" time="0.1636" asserts="0" description="Windows STIG">
                <results>
                  <test-case description="Should call the Windows code path when not an office registry format" name="Get-RegistryValueData.Windows STIG.Should call the Windows code path when not an office registry format" time="0.1636" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Office STIG" executed="True" result="Failure" success="False" time="0.1108" asserts="0" description="Office STIG">
                <results>
                  <test-case description="Should call the Office code path with an office registry format" name="Get-RegistryValueData.Office STIG.Should call the Office code path with an office registry format" time="0.1108" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\Program Files\WindowsPowerShell\Modules\Pester\4.1.1\Pester.psm1: line 1145
1145: Throw "This command has been renamed to 'Assert-VerifiableMock' (without the 's' at the end), please update your code. For more information see: https://github.com/pester/Pester/wiki/Migrating-from-Pester-3-to-Pester-4"
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueDataFromWindowsStig" executed="True" result="Success" success="True" time="0.3209" asserts="0" description="Get-RegistryValueDataFromWindowsStig">
            <results>
              <test-case description="Should return '30 (or less, but not 0)' from 'Value: 30 (or less, but not 0)'" name="Get-RegistryValueDataFromWindowsStig.Should return '30 (or less, but not 0)' from 'Value: 30 (or less, but not 0)'" time="0.0811" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0x00000384 (900) (or less)' from 'Value: 0x00000384 (900) (or less)'" name="Get-RegistryValueDataFromWindowsStig.Should return '0x00000384 (900) (or less)' from 'Value: 0x00000384 (900) (or less)'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '5 (or less)' from 'Value: 5 (or less)'" name="Get-RegistryValueDataFromWindowsStig.Should return '5 (or less)' from 'Value: 5 (or less)'" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '196608' from 'Value: 196608'" name="Get-RegistryValueDataFromWindowsStig.Should return '196608' from 'Value: 196608'" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '300000 (or less)' from 'Value: 300000 (or less)'" name="Get-RegistryValueDataFromWindowsStig.Should return '300000 (or less)' from 'Value: 300000 (or less)'" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '10' from 'Value: 10 '" name="Get-RegistryValueDataFromWindowsStig.Should return '10' from 'Value: 10 '" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '1 or 2 = a Finding' from 'Value: 1 or 2 = a Finding'" name="Get-RegistryValueDataFromWindowsStig.Should return '1 or 2 = a Finding' from 'Value: 1 or 2 = a Finding'" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '1' from 'Value:1 '" name="Get-RegistryValueDataFromWindowsStig.Should return '1' from 'Value:1 '" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0x000004b0 (1200) or less' from 'Value: 0x000004b0 (1200) or less'" name="Get-RegistryValueDataFromWindowsStig.Should return '0x000004b0 (1200) or less' from 'Value: 0x000004b0 (1200) or less'" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '14 (or greater)' from 'Value: 14 (or greater)'" name="Get-RegistryValueDataFromWindowsStig.Should return '14 (or greater)' from 'Value: 14 (or greater)'" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '1' from 'Value: 1 '" name="Get-RegistryValueDataFromWindowsStig.Should return '1' from 'Value: 1 '" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '32768' from 'Value: 32768'" name="Get-RegistryValueDataFromWindowsStig.Should return '32768' from 'Value: 32768'" time="0.01" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '4 (Prompt for consent)' from 'Value: 4 (Prompt for consent)'" name="Get-RegistryValueDataFromWindowsStig.Should return '4 (Prompt for consent)' from 'Value: 4 (Prompt for consent)'" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '10' from 'Value:10'" name="Get-RegistryValueDataFromWindowsStig.Should return '10' from 'Value:10'" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0x000dbba0 (900000) or less but not 0' from 'Value: 0x000dbba0 (900000) or less but not 0'" name="Get-RegistryValueDataFromWindowsStig.Should return '0x000dbba0 (900000) or less but not 0' from 'Value: 0x000dbba0 (900000) or less but not 0'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '10' from 'Value:10 '" name="Get-RegistryValueDataFromWindowsStig.Should return '10' from 'Value:10 '" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '1' from 'Value:1'" name="Get-RegistryValueDataFromWindowsStig.Should return '1' from 'Value:1'" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '1' from 'Value: 1'" name="Get-RegistryValueDataFromWindowsStig.Should return '1' from 'Value: 1'" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0x0000000a (10)' from 'Value: 0x0000000a (10)'" name="Get-RegistryValueDataFromWindowsStig.Should return '0x0000000a (10)' from 'Value: 0x0000000a (10)'" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '3 (or less)' from 'Value:  3 (or less)'" name="Get-RegistryValueDataFromWindowsStig.Should return '3 (or less)' from 'Value:  3 (or less)'" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '1 (Enabled)' from 'Value: 1 (Enabled)'" name="Get-RegistryValueDataFromWindowsStig.Should return '1 (Enabled)' from 'Value: 1 (Enabled)'" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0x00000032 (50) (or greater)' from 'Value: 0x00000032 (50) (or greater)'" name="Get-RegistryValueDataFromWindowsStig.Should return '0x00000032 (50) (or greater)' from 'Value: 0x00000032 (50) (or greater)'" time="0.018" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0x20080000 (537395200)' from 'Value: 0x20080000 (537395200)'" name="Get-RegistryValueDataFromWindowsStig.Should return '0x20080000 (537395200)' from 'Value: 0x20080000 (537395200)'" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '10' from 'Value: 10'" name="Get-RegistryValueDataFromWindowsStig.Should return '10' from 'Value: 10'" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-RegistryValueDataIsBlank" executed="True" result="Success" success="True" time="0.0811" asserts="0" description="Test-RegistryValueDataIsBlank">
            <results>
              <test-case description="Should return True when given '(Blank)'" name="Test-RegistryValueDataIsBlank.Should return True when given '(Blank)'" time="0.0602" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False when not given '(Blank)'" name="Test-RegistryValueDataIsBlank.Should return False when not given '(Blank)'" time="0.021" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-RegistryValueDataIsEnabledOrDisabled" executed="True" result="Success" success="True" time="0.112" asserts="0" description="Test-RegistryValueDataIsEnabledOrDisabled">
            <results>
              <test-case description="Should return True when given 'Enabled'" name="Test-RegistryValueDataIsEnabledOrDisabled.Should return True when given 'Enabled'" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given 'Enable'" name="Test-RegistryValueDataIsEnabledOrDisabled.Should return True when given 'Enable'" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given 'Disabled'" name="Test-RegistryValueDataIsEnabledOrDisabled.Should return True when given 'Disabled'" time="0.009" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when given 'Disable'" name="Test-RegistryValueDataIsEnabledOrDisabled.Should return True when given 'Disable'" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False when not given enabled ro disabled" name="Test-RegistryValueDataIsEnabledOrDisabled.Should return False when not given enabled ro disabled" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ValidEnabledOrDisabled" executed="True" result="Success" success="True" time="0.3494" asserts="0" description="Get-ValidEnabledOrDisabled">
            <results>
              <test-suite type="TestFixture" name="Valid Dword" executed="True" result="Success" success="True" time="0.241" asserts="0" description="Valid Dword">
                <results>
                  <test-case description="Should Convert Enable into 1 with Type Dword" name="Get-ValidEnabledOrDisabled.Valid Dword.Should Convert Enable into 1 with Type Dword" time="0.1944" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Convert Disabled into 1 with Type Dword" name="Get-ValidEnabledOrDisabled.Valid Dword.Should Convert Disabled into 1 with Type Dword" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Invalid Dword" executed="True" result="Success" success="True" time="0.1083" asserts="0" description="Invalid Dword">
                <results>
                  <test-case description="Should return Enable when not a Dword" name="Get-ValidEnabledOrDisabled.Invalid Dword.Should return Enable when not a Dword" time="0.0765" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return Disable when not a Dword" name="Get-ValidEnabledOrDisabled.Invalid Dword.Should return Disable when not a Dword" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Hex Code Tasks" executed="True" result="Success" success="True" time="0.3241" asserts="0" description="Hex Code Tasks">
            <results>
              <test-suite type="TestFixture" name="Test-RegistryValueDataIsHexCode" executed="True" result="Success" success="True" time="0.1844" asserts="0" description="Test-RegistryValueDataIsHexCode">
                <results>
                  <test-case description="Should return True when given 'Value: 0x00000032 (50) (or greater)'" name="Hex Code Tasks.Test-RegistryValueDataIsHexCode.Should return True when given 'Value: 0x00000032 (50) (or greater)'" time="0.116" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 0x000004b0 (1200) or less'" name="Hex Code Tasks.Test-RegistryValueDataIsHexCode.Should return True when given 'Value: 0x000004b0 (1200) or less'" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 0x00000384 (900) (or less)'" name="Hex Code Tasks.Test-RegistryValueDataIsHexCode.Should return True when given 'Value: 0x00000384 (900) (or less)'" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 0x000dbba0 (900000) or less but not 0'" name="Hex Code Tasks.Test-RegistryValueDataIsHexCode.Should return True when given 'Value: 0x000dbba0 (900000) or less but not 0'" time="0.0188" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return False when not given a hex code" name="Hex Code Tasks.Test-RegistryValueDataIsHexCode.Should return False when not given a hex code" time="0.0243" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-IntegerFromHex" executed="True" result="Success" success="True" time="0.1397" asserts="0" description="Get-IntegerFromHex">
                <results>
                  <test-case description="Should thow an error if a hex code is not found" name="Hex Code Tasks.Get-IntegerFromHex.Should thow an error if a hex code is not found" time="0.0806" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '50' from 'Value: 0x00000032 (50) (or greater)'" name="Hex Code Tasks.Get-IntegerFromHex.Should return '50' from 'Value: 0x00000032 (50) (or greater)'" time="0.0213" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '1200' from 'Value: 0x000004b0 (1200) or less'" name="Hex Code Tasks.Get-IntegerFromHex.Should return '1200' from 'Value: 0x000004b0 (1200) or less'" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '900' from 'Value: 0x00000384 (900) (or less)'" name="Hex Code Tasks.Get-IntegerFromHex.Should return '900' from 'Value: 0x00000384 (900) (or less)'" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '900000' from 'Value: 0x000dbba0 (900000) or less but not 0'" name="Hex Code Tasks.Get-IntegerFromHex.Should return '900000' from 'Value: 0x000dbba0 (900000) or less but not 0'" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Integer tasks" executed="True" result="Success" success="True" time="0.4936" asserts="0" description="Integer tasks">
            <results>
              <test-suite type="TestFixture" name="Test-RegistryValueDataIsInteger" executed="True" result="Success" success="True" time="0.2403" asserts="0" description="Test-RegistryValueDataIsInteger">
                <results>
                  <test-case description="Should return True when given 'Value: 1 (Enabled)'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 1 (Enabled)'" time="0.0985" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 1'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 1'" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 1 '" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 1 '" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value:1'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value:1'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value:1 '" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value:1 '" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 10'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 10'" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 10 '" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 10 '" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value:10'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value:10'" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value:10 '" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value:10 '" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 196608'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 196608'" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 32768'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 32768'" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return True when given 'Value: 4 (Prompt for consent)'" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return True when given 'Value: 4 (Prompt for consent)'" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return False when not given a hex code" name="Integer tasks.Test-RegistryValueDataIsInteger.Should return False when not given a hex code" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-NumberFromString" executed="True" result="Success" success="True" time="0.2533" asserts="0" description="Get-NumberFromString">
                <results>
                  <test-case description="Should thow an error if a integer is not found" name="Integer tasks.Get-NumberFromString.Should thow an error if a integer is not found" time="0.112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '1' from 'Value: 1 (Enabled)'" name="Integer tasks.Get-NumberFromString.Should return '1' from 'Value: 1 (Enabled)'" time="0.0285" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '1' from 'Value: 1'" name="Integer tasks.Get-NumberFromString.Should return '1' from 'Value: 1'" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '1' from 'Value: 1 '" name="Integer tasks.Get-NumberFromString.Should return '1' from 'Value: 1 '" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '1' from 'Value:1'" name="Integer tasks.Get-NumberFromString.Should return '1' from 'Value:1'" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '1' from 'Value:1 '" name="Integer tasks.Get-NumberFromString.Should return '1' from 'Value:1 '" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '10' from 'Value: 10'" name="Integer tasks.Get-NumberFromString.Should return '10' from 'Value: 10'" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '10' from 'Value: 10 '" name="Integer tasks.Get-NumberFromString.Should return '10' from 'Value: 10 '" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '10' from 'Value:10'" name="Integer tasks.Get-NumberFromString.Should return '10' from 'Value:10'" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '10' from 'Value:10 '" name="Integer tasks.Get-NumberFromString.Should return '10' from 'Value:10 '" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '196608' from 'Value: 196608'" name="Integer tasks.Get-NumberFromString.Should return '196608' from 'Value: 196608'" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '32768' from 'Value: 32768'" name="Integer tasks.Get-NumberFromString.Should return '32768' from 'Value: 32768'" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return '4' from 'Value: 4 (Prompt for consent)'" name="Integer tasks.Get-NumberFromString.Should return '4' from 'Value: 4 (Prompt for consent)'" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-RegistryValueDataContainsRange" executed="True" result="Success" success="True" time="0.2248" asserts="0" description="Test-RegistryValueDataContainsRange">
            <results>
              <test-suite type="TestFixture" name="Matches" executed="True" result="Success" success="True" time="0.1244" asserts="0" description="Matches">
                <results>
                  <test-case description="Should return true when given 'Value: 1 or 2 = a Finding'" name="Test-RegistryValueDataContainsRange.Matches.Should return true when given 'Value: 1 or 2 = a Finding'" time="0.0834" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true when given 'Value:  3 (or less)'" name="Test-RegistryValueDataContainsRange.Matches.Should return true when given 'Value:  3 (or less)'" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true when given 'Value: 300000 (or less)'" name="Test-RegistryValueDataContainsRange.Matches.Should return true when given 'Value: 300000 (or less)'" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true when given 'Value: 30 (or less, but not 0)'" name="Test-RegistryValueDataContainsRange.Matches.Should return true when given 'Value: 30 (or less, but not 0)'" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true when given 'Value: 0x000dbba0 (900000) or less but not 0'" name="Test-RegistryValueDataContainsRange.Matches.Should return true when given 'Value: 0x000dbba0 (900000) or less but not 0'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true when given 'Value: Possible values are NoSync,NTP,NT5DS, AllSync'" name="Test-RegistryValueDataContainsRange.Matches.Should return true when given 'Value: Possible values are NoSync,NTP,NT5DS, AllSync'" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Non Matches" executed="True" result="Success" success="True" time="0.1004" asserts="0" description="Non Matches">
                <results>
                  <test-case description="Should return false when given 'Value: (Blank)'" name="Test-RegistryValueDataContainsRange.Non Matches.Should return false when given 'Value: (Blank)'" time="0.0707" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false when given 'Value: Enabled'" name="Test-RegistryValueDataContainsRange.Non Matches.Should return false when given 'Value: Enabled'" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false when given 'Value: Disabled'" name="Test-RegistryValueDataContainsRange.Non Matches.Should return false when given 'Value: Disabled'" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false when given 'Value: 0x0000000a (10)'" name="Test-RegistryValueDataContainsRange.Non Matches.Should return false when given 'Value: 0x0000000a (10)'" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false when given 'Value: 10'" name="Test-RegistryValueDataContainsRange.Non Matches.Should return false when given 'Value: 10'" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-MultiStringRegistryData" executed="True" result="Success" success="True" time="0.0804" asserts="0" description="Format-MultiStringRegistryData">
            <results>
              <test-case description="Should return a multi line string from 'One Two Three'" name="Format-MultiStringRegistryData.Should return a multi line string from 'One Two Three'" time="0.0584" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return a multi line string from 'Four, Five, Six'" name="Format-MultiStringRegistryData.Should return a multi line string from 'Four, Five, Six'" time="0.022" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-MultiValueRegistryStringData" executed="True" result="Success" success="True" time="0.093" asserts="0" description="Get-MultiValueRegistryStringData">
            <results>
              <test-case description="Should return a string of semicolon delimited values." name="Get-MultiValueRegistryStringData.Should return a string of semicolon delimited values." time="0.0602" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return a string of semicolon delimited values." name="Get-MultiValueRegistryStringData.Should return a string of semicolon delimited values." time="0.0152" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return a string of semicolon delimited values." name="Get-MultiValueRegistryStringData.Should return a string of semicolon delimited values." time="0.0176" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-IsValidDword" executed="True" result="Success" success="True" time="0.0763" asserts="0" description="Test-IsValidDword">
            <results>
              <test-case description="Should return True when given an integer '3'" name="Test-IsValidDword.Should return True when given an integer '3'" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False when given a string 'Three'" name="Test-IsValidDword.Should return False when given a string 'Three'" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConvertTo-ValidDword" executed="True" result="Success" success="True" time="0.1525" asserts="0" description="ConvertTo-ValidDword">
            <results>
              <test-case description="Should return '1' when given '1 (Enabled)'" name="ConvertTo-ValidDword.Should return '1' when given '1 (Enabled)'" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '1' when given 'Enabled'" name="ConvertTo-ValidDword.Should return '1' when given 'Enabled'" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0' when given '0 (Disabled)'" name="ConvertTo-ValidDword.Should return '0' when given '0 (Disabled)'" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '0' when given 'Disabled'" name="ConvertTo-ValidDword.Should return '0' when given 'Disabled'" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given anything but Enabled|Disable" name="ConvertTo-ValidDword.Should throw an error when given anything but Enabled|Disable" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Range value detection and return data" executed="True" result="Success" success="True" time="0" asserts="0" description="Range value detection and return data">
            <results>
              <test-suite type="TestFixture" name="Multi String Value" executed="True" result="Success" success="True" time="0" asserts="0" description="Multi String Value">
                <results />
              </test-suite>
              <test-suite type="TestFixture" name="Multiple registry entries per SITG Id" executed="True" result="Success" success="True" time="0" asserts="0" description="Multiple registry entries per SITG Id">
                <results />
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-MultipleRegistryEntries" executed="True" result="Success" success="True" time="0.2021" asserts="0" description="Test-MultipleRegistryEntries">
            <results>
              <test-case description="Should return True when multiple registry settings are found" name="Test-MultipleRegistryEntries.Should return True when multiple registry settings are found" time="0.1518" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when multiple registry settings are found" name="Test-MultipleRegistryEntries.Should return True when multiple registry settings are found" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when multiple registry settings are found" name="Test-MultipleRegistryEntries.Should return True when multiple registry settings are found" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False when multiple registry settings are not found" name="Test-MultipleRegistryEntries.Should return False when multiple registry settings are not found" time="0.0276" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Split-MultipleRegistryEntries" executed="True" result="Success" success="True" time="0.3817" asserts="0" description="Split-MultipleRegistryEntries">
            <results>
              <test-suite type="TestFixture" name="Multiple Hives" executed="True" result="Success" success="True" time="0.1956" asserts="0" description="Multiple Hives">
                <results>
                  <test-case description="Should not return the second registry entry in the first object" name="Split-MultipleRegistryEntries.Multiple Hives.Should not return the second registry entry in the first object" time="0.164" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return the first registry entry in the second object" name="Split-MultipleRegistryEntries.Multiple Hives.Should not return the first registry entry in the second object" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Multiple Paths" executed="True" result="Success" success="True" time="0.1026" asserts="0" description="Multiple Paths">
                <results>
                  <test-case description="Should not return the second registry entry in the first object, but have the same Hive" name="Split-MultipleRegistryEntries.Multiple Paths.Should not return the second registry entry in the first object, but have the same Hive" time="0.0832" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return the first registry entry in the second object, but have the same Hive" name="Split-MultipleRegistryEntries.Multiple Paths.Should not return the first registry entry in the second object, but have the same Hive" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Multiple Values" executed="True" result="Success" success="True" time="0.0834" asserts="0" description="Multiple Values">
                <results>
                  <test-case description="Should not return the second registry entry in the first object, but have the same hive and path" name="Split-MultipleRegistryEntries.Multiple Values.Should not return the second registry entry in the first object, but have the same hive and path" time="0.0652" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return the first registry entry in the second object, but have the same hive and path" name="Split-MultipleRegistryEntries.Multiple Values.Should not return the first registry entry in the second object, but have the same hive and path" time="0.0182" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\securityOptionRule.tests.ps1" executed="True" result="Success" success="True" time="0.2744" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\securityOptionRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-SecurityOptionRule" executed="True" result="Success" success="True" time="0.2744" asserts="0" description="ConvertTo-SecurityOptionRule">
            <results>
              <test-case description="Should return a SecurityOptionRule object" name="ConvertTo-SecurityOptionRule.Should return a SecurityOptionRule object" time="0.2744" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\serviceRule.tests.ps1" executed="True" result="Success" success="True" time="0.2473" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\serviceRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-ServiceRule" executed="True" result="Success" success="True" time="0.2473" asserts="0" description="ConvertTo-ServiceRule">
            <results>
              <test-case description="Should return an ServiceRule object" name="ConvertTo-ServiceRule.Should return an ServiceRule object" time="0.2473" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\singleLineRegistryRule.tests.ps1" executed="True" result="Success" success="True" time="1.0128" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\singleLineRegistryRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-SingleLineRegistryRule" executed="True" result="Success" success="True" time="0.1493" asserts="0" description="Test-SingleLineRegistryRule">
            <results>
              <test-case description="Should exist" name="Test-SingleLineRegistryRule.Should exist" time="0.0902" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when 'HKCU\' is found" name="Test-SingleLineRegistryRule.Should return True when 'HKCU\' is found" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True when 'HKLM\' is found" name="Test-SingleLineRegistryRule.Should return True when 'HKLM\' is found" time="0.0189" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False when 'Permission' is found" name="Test-SingleLineRegistryRule.Should return False when 'Permission' is found" time="0.0223" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-SingleLineRegistryPath " executed="True" result="Success" success="True" time="0.1435" asserts="0" description="Get-SingleLineRegistryPath ">
            <results>
              <test-case description="Should return the full Current User registry path" name="Get-SingleLineRegistryPath .Should return the full Current User registry path" time="0.0892" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return the full Local Machine registry path" name="Get-SingleLineRegistryPath .Should return the full Local Machine registry path" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueTypeFromSingleLineStig" executed="True" result="Success" success="True" time="0.3306" asserts="0" description="Get-RegistryValueTypeFromSingleLineStig">
            <results>
              <test-case description="Should return 'REG_SZ' from 'Criteria: If the value &quot;1001&quot; is REG_SZ = 3'" name="Get-RegistryValueTypeFromSingleLineStig.Should return 'REG_SZ' from 'Criteria: If the value &quot;1001&quot; is REG_SZ = 3'" time="0.1235" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'REG_BINARY' from 'Criteria: If the value &quot;1001&quot; is REG_BINARY = 3'" name="Get-RegistryValueTypeFromSingleLineStig.Should return 'REG_BINARY' from 'Criteria: If the value &quot;1001&quot; is REG_BINARY = 3'" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'REG_DWORD' from 'Criteria: If the value &quot;1001&quot; is REG_DWORD = 3'" name="Get-RegistryValueTypeFromSingleLineStig.Should return 'REG_DWORD' from 'Criteria: If the value &quot;1001&quot; is REG_DWORD = 3'" time="0.0308" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'REG_QWORD' from 'Criteria: If the value &quot;1001&quot; is REG_QWORD = 3'" name="Get-RegistryValueTypeFromSingleLineStig.Should return 'REG_QWORD' from 'Criteria: If the value &quot;1001&quot; is REG_QWORD = 3'" time="0.0393" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'REG_MULTI_SZ' from 'Criteria: If the value &quot;1001&quot; is REG_MULTI_SZ = 3'" name="Get-RegistryValueTypeFromSingleLineStig.Should return 'REG_MULTI_SZ' from 'Criteria: If the value &quot;1001&quot; is REG_MULTI_SZ = 3'" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'REG_EXPAND_SZ' from 'Criteria: If the value &quot;1001&quot; is REG_EXPAND_SZ = 3'" name="Get-RegistryValueTypeFromSingleLineStig.Should return 'REG_EXPAND_SZ' from 'Criteria: If the value &quot;1001&quot; is REG_EXPAND_SZ = 3'" time="0.0397" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'null' with invalid registry type" name="Get-RegistryValueTypeFromSingleLineStig.Should return 'null' with invalid registry type" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueNameFromSingleLineStig" executed="True" result="Success" success="True" time="0.0628" asserts="0" description="Get-RegistryValueNameFromSingleLineStig">
            <results>
              <test-case description="Should return 'ValueName' from 'Criteria: If the value &quot;ValueName&quot; is REG_Type = 2, this is not a finding.'" name="Get-RegistryValueNameFromSingleLineStig.Should return 'ValueName' from 'Criteria: If the value &quot;ValueName&quot; is REG_Type = 2, this is not a finding.'" time="0.0628" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueDataFromSingleStig" executed="True" result="Success" success="True" time="0.0637" asserts="0" description="Get-RegistryValueDataFromSingleStig">
            <results>
              <test-case description="Should return '2' from 'Criteria: If the value &quot;ValueName&quot; is REG_Type = 2, this is not a finding.'" name="Get-RegistryValueDataFromSingleStig.Should return '2' from 'Criteria: If the value &quot;ValueName&quot; is REG_Type = 2, this is not a finding.'" time="0.0637" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueStringFromSingleLineStig" executed="True" result="Success" success="True" time="0.142" asserts="0" description="Get-RegistryValueStringFromSingleLineStig">
            <results>
              <test-case description="Should return the correct full string" name="Get-RegistryValueStringFromSingleLineStig.Should return the correct full string" time="0.0791" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return the correct trimmed string" name="Get-RegistryValueStringFromSingleLineStig.Should return the correct trimmed string" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return the correct trimmed string" name="Get-RegistryValueStringFromSingleLineStig.Should return the correct trimmed string" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should remove extra spaces from the string" name="Get-RegistryValueStringFromSingleLineStig.Should remove extra spaces from the string" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-SingleLineStigFormat" executed="True" result="Success" success="True" time="0.1208" asserts="0" description="Test-SingleLineStigFormat">
            <results>
              <test-case description="Should return True when match Office format" name="Test-SingleLineStigFormat.Should return True when match Office format" time="0.0899" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False when not match Office foramt" name="Test-SingleLineStigFormat.Should return False when not match Office foramt" time="0.0309" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\userRightsAssignmentRule.tests.ps1" executed="True" result="Success" success="True" time="0.3325" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\userRightsAssignmentRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-UserRightRule" executed="True" result="Success" success="True" time="0.3325" asserts="0" description="ConvertTo-UserRightRule">
            <results>
              <test-case description="Should return an UserRightRule object" name="ConvertTo-UserRightRule.Should return an UserRightRule object" time="0.3325" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\windowsFeatureRule.tests.ps1" executed="True" result="Success" success="True" time="0.2952" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\windowsFeatureRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-WindowsFeatureRule" executed="True" result="Success" success="True" time="0.2952" asserts="0" description="ConvertTo-WindowsFeatureRule">
            <results>
              <test-case description="Should return an WindowsFeatureRule object" name="ConvertTo-WindowsFeatureRule.Should return an WindowsFeatureRule object" time="0.2952" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\WmiRule.tests.ps1" executed="True" result="Success" success="True" time="0.1989" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\common\WmiRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-WmiRule" executed="True" result="Success" success="True" time="0.1989" asserts="0" description="ConvertTo-WmiRule">
            <results>
              <test-case description="Should return an WmiRule object" name="ConvertTo-WmiRule.Should return an WmiRule object" time="0.1989" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\dns_server\dnsServerRootHintRule.tests.ps1" executed="True" result="Success" success="True" time="0.1487" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\dns_server\dnsServerRootHintRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-DnsServerRootHintRule" executed="True" result="Success" success="True" time="0.1487" asserts="0" description="ConvertTo-DnsServerRootHintRule">
            <results>
              <test-case description="Should return an DnsServerRootHintRule object" name="ConvertTo-DnsServerRootHintRule.Should return an DnsServerRootHintRule object" time="0.1487" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\dns_server\dnsServerSettingRule.tests.ps1" executed="True" result="Success" success="True" time="0.3707" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\dns_server\dnsServerSettingRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Private DnsServerSetting Rule tests" executed="True" result="Success" success="True" time="0.2443" asserts="0" description="Private DnsServerSetting Rule tests">
            <results>
              <test-suite type="TestFixture" name="Dns Stig Rules regex tests" executed="True" result="Success" success="True" time="0.2443" asserts="0" description="Dns Stig Rules regex tests">
                <results>
                  <test-case description="Should match text inside of the words 'the' and 'tab'" name="Private DnsServerSetting Rule tests.Dns Stig Rules regex tests.Should match text inside of the words 'the' and 'tab'" time="0.1782" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return text between the words 'the' and 'tab'" name="Private DnsServerSetting Rule tests.Dns Stig Rules regex tests.Should return text between the words 'the' and 'tab'" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match any non letter characters" name="Private DnsServerSetting Rule tests.Dns Stig Rules regex tests.Should match any non letter characters" time="0.0308" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should remove the non word characters" name="Private DnsServerSetting Rule tests.Dns Stig Rules regex tests.Should remove the non word characters" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConvertTo-DnsServerSettingRule" executed="True" result="Success" success="True" time="0.1264" asserts="0" description="ConvertTo-DnsServerSettingRule">
            <results>
              <test-case description="Should return an DnsServerSettingRule object" name="ConvertTo-DnsServerSettingRule.Should return an DnsServerSettingRule object" time="0.1264" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\dns_server\dnsWinEventLogRule.tests.ps1" executed="True" result="Success" success="True" time="0.2244" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\dns_server\dnsWinEventLogRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-DnsWinEventLogRule" executed="True" result="Success" success="True" time="0.2244" asserts="0" description="ConvertTo-DnsWinEventLogRule">
            <results>
              <test-case description="Should return an WinEventLogRule object" name="ConvertTo-DnsWinEventLogRule.Should return an WinEventLogRule object" time="0.2244" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\iisLoggingRule.tests.ps1" executed="True" result="Success" success="True" time="0.2792" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\iisLoggingRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-IisLoggingRule" executed="True" result="Success" success="True" time="0.2792" asserts="0" description="ConvertTo-IisLoggingRule">
            <results>
              <test-case description="Should return an IisLoggingRule object" name="ConvertTo-IisLoggingRule.Should return an IisLoggingRule object" time="0.2792" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\MimeTypeRule.tests.ps1" executed="True" result="Success" success="True" time="0.2689" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\MimeTypeRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-MimeTypeRule" executed="True" result="Success" success="True" time="0.2689" asserts="0" description="ConvertTo-MimeTypeRule">
            <results>
              <test-case description="Should return an MimeTypeRule object" name="ConvertTo-MimeTypeRule.Should return an MimeTypeRule object" time="0.2689" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\WebAppPoolRule.tests.ps1" executed="True" result="Success" success="True" time="0.2798" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\WebAppPoolRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-WebAppPoolRule" executed="True" result="Success" success="True" time="0.2798" asserts="0" description="ConvertTo-WebAppPoolRule">
            <results>
              <test-case description="Should return an WebAppPoolRule object" name="ConvertTo-WebAppPoolRule.Should return an WebAppPoolRule object" time="0.2798" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\WebConfigurationPropertyRule.tests.ps1" executed="True" result="Success" success="True" time="0.4134" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\iis\WebConfigurationPropertyRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-WebConfigurationPropertyRule" executed="True" result="Success" success="True" time="0.4134" asserts="0" description="ConvertTo-WebConfigurationPropertyRule">
            <results>
              <test-case description="Should return an WebConfigurationPropertyRule object" name="ConvertTo-WebConfigurationPropertyRule.Should return an WebConfigurationPropertyRule object" time="0.4134" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\sql\SqlScriptRule.tests.ps1" executed="True" result="Success" success="True" time="0.2547" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\sql\SqlScriptRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-SqlScriptRule" executed="True" result="Success" success="True" time="0.2547" asserts="0" description="ConvertTo-SqlScriptRule">
            <results>
              <test-case description="Should return an SqlScriptRule object" name="ConvertTo-SqlScriptRule.Should return an SqlScriptRule object" time="0.2547" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\Main.tests.ps1" executed="True" result="Success" success="True" time="0.2389" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\private\Main.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-StigRules" executed="True" result="Success" success="True" time="0.2389" asserts="0" description="Get-StigRules">
            <results>
              <test-case description="Verifies the function 'Get-StigRules' exists" name="Get-StigRules.Verifies the function 'Get-StigRules' exists" time="0.2389" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\AccountPolicyRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.7722" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\AccountPolicyRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="AccountPolicyRuleClass Child Class" executed="True" result="Success" success="True" time="0.2937" asserts="0" description="AccountPolicyRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1283" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="AccountPolicyRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1283" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0918" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'PolicyName'" name="AccountPolicyRuleClass Child Class.Class Properties.Should have a property named 'PolicyName'" time="0.083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'PolicyValue'" name="AccountPolicyRuleClass Child Class.Class Properties.Should have a property named 'PolicyValue'" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0736" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetPolicyName'" name="AccountPolicyRuleClass Child Class.Class Methods.Should have a method named 'SetPolicyName'" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetPolicyValue'" name="AccountPolicyRuleClass Child Class.Class Methods.Should have a method named 'SetPolicyValue'" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetPolicyValueRange'" name="AccountPolicyRuleClass Child Class.Class Methods.Should have a method named 'SetPolicyValueRange'" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-AccountPolicyName" executed="True" result="Success" success="True" time="0.1008" asserts="0" description="Get-AccountPolicyName">
            <results>
              <test-case description="Should return 'Account lockout duration'" name="Get-AccountPolicyName.Should return 'Account lockout duration'" time="0.068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Password must meet complexity requirements'" name="Get-AccountPolicyName.Should return 'Password must meet complexity requirements'" time="0.0199" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Store passwords using reversible encryption'" name="Get-AccountPolicyName.Should return 'Store passwords using reversible encryption'" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-AccountPolicyValue" executed="True" result="Success" success="True" time="0.0698" asserts="0" description="Get-AccountPolicyValue">
            <results>
              <test-case description="Should return '15'" name="Get-AccountPolicyValue.Should return '15'" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Enabled'" name="Get-AccountPolicyValue.Should return 'Enabled'" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Disabled'" name="Get-AccountPolicyValue.Should return 'Disabled'" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-SecurityPolicyContainsRange" executed="True" result="Success" success="True" time="0.308" asserts="0" description="Test-SecurityPolicyContainsRange">
            <results>
              <test-suite type="TestFixture" name="Match" executed="True" result="Success" success="True" time="0.1961" asserts="0" description="Match">
                <results>
                  <test-case description="Should return true from 'If the &quot;Reset account lockout counter after&quot; value is less than &quot;15&quot; minutes, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the &quot;Reset account lockout counter after&quot; value is less than &quot;15&quot; minutes, this is a finding.'" time="0.1024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for &quot;Enforce password history&quot; is less than &quot;24&quot; passwords remembered, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for &quot;Enforce password history&quot; is less than &quot;24&quot; passwords remembered, this is a finding.'" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the &quot;Account lockout threshold&quot; is &quot;0&quot; or more than &quot;3&quot; attempts, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the &quot;Account lockout threshold&quot; is &quot;0&quot; or more than &quot;3&quot; attempts, this is a finding.'" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the &quot;Account lockout duration&quot; is less than &quot;15&quot; minutes (excluding &quot;0&quot;), this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the &quot;Account lockout duration&quot; is less than &quot;15&quot; minutes (excluding &quot;0&quot;), this is a finding.'" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for the &quot;Minimum password length,&quot; is less than &quot;14&quot; characters, this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for the &quot;Minimum password length,&quot; is less than &quot;14&quot; characters, this is a finding.'" time="0.0141" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for the &quot;Minimum password age&quot; is set to &quot;0&quot; days (&quot;Password can be changed immediately.&quot;), this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for the &quot;Minimum password age&quot; is set to &quot;0&quot; days (&quot;Password can be changed immediately.&quot;), this is a finding.'" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return true from 'If the value for the &quot;Maximum password age&quot; is greater than &quot;60&quot; days, this is a finding.  If the value is set to &quot;0&quot; (never expires), this is a finding.'" name="Test-SecurityPolicyContainsRange.Match.Should return true from 'If the value for the &quot;Maximum password age&quot; is greater than &quot;60&quot; days, this is a finding.  If the value is set to &quot;0&quot; (never expires), this is a finding.'" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Not Match" executed="True" result="Success" success="True" time="0.1118" asserts="0" description="Not Match">
                <results>
                  <test-case description="Should return false from 'If the value for &quot;Password must meet complexity requirements&quot; is not set to &quot;Enabled&quot;, this is a finding.'" name="Test-SecurityPolicyContainsRange.Not Match.Should return false from 'If the value for &quot;Password must meet complexity requirements&quot; is not set to &quot;Enabled&quot;, this is a finding.'" time="0.0686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false from 'If the value for &quot;Store password using reversible encryption&quot; is not set to &quot;Disabled&quot;, this is a finding.'" name="Test-SecurityPolicyContainsRange.Not Match.Should return false from 'If the value for &quot;Store password using reversible encryption&quot; is not set to &quot;Disabled&quot;, this is a finding.'" time="0.0335" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false from 'If the &quot;Account lockout duration&quot; is not set to &quot;0&quot;, requiring an administrator to unlock the account, this is a finding.'" name="Test-SecurityPolicyContainsRange.Not Match.Should return false from 'If the &quot;Account lockout duration&quot; is not set to &quot;0&quot;, requiring an administrator to unlock the account, this is a finding.'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\AuditPolicyRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.9681" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\AuditPolicyRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="AuditPolicyRuleClass Child Class" executed="True" result="Success" success="True" time="0.5419" asserts="0" description="AuditPolicyRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.2327" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="AuditPolicyRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.2327" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.1335" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'Subcategory'" name="AuditPolicyRuleClass Child Class.Class Properties.Should have a property named 'Subcategory'" time="0.0875" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'AuditFlag'" name="AuditPolicyRuleClass Child Class.Class Properties.Should have a property named 'AuditFlag'" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Ensure'" name="AuditPolicyRuleClass Child Class.Class Properties.Should have a property named 'Ensure'" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1757" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetSubcategory'" name="AuditPolicyRuleClass Child Class.Class Methods.Should have a method named 'SetSubcategory'" time="0.0819" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetAuditFlag'" name="AuditPolicyRuleClass Child Class.Class Methods.Should have a method named 'SetAuditFlag'" time="0.0266" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetEnsureFlag'" name="AuditPolicyRuleClass Child Class.Class Methods.Should have a method named 'SetEnsureFlag'" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="AuditPolicyRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-AuditPolicySettings" executed="True" result="Success" success="True" time="0.3071" asserts="0" description="Get-AuditPolicySettings">
            <results>
              <test-suite type="TestFixture" name="Data format &quot;-&gt;&quot;" executed="True" result="Success" success="True" time="0.216" asserts="0" description="Data format &quot;-&gt;&quot;">
                <results>
                  <test-case description="Should return the Category in the first index" name="Get-AuditPolicySettings.Data format &quot;-&gt;&quot;.Should return the Category in the first index" time="0.1546" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the SubCategory in the second index" name="Get-AuditPolicySettings.Data format &quot;-&gt;&quot;.Should return the SubCategory in the second index" time="0.0331" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the audit flag in the third index" name="Get-AuditPolicySettings.Data format &quot;-&gt;&quot;.Should return the audit flag in the third index" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Data format &quot;&gt;&gt;&quot;" executed="True" result="Success" success="True" time="0.091" asserts="0" description="Data format &quot;&gt;&gt;&quot;">
                <results>
                  <test-case description="Should return the Category in the first index" name="Get-AuditPolicySettings.Data format &quot;&gt;&gt;&quot;.Should return the Category in the first index" time="0.0656" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the SubCategory in the second index" name="Get-AuditPolicySettings.Data format &quot;&gt;&gt;&quot;.Should return the SubCategory in the second index" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the audit flag in the third index" name="Get-AuditPolicySettings.Data format &quot;&gt;&gt;&quot;.Should return the audit flag in the third index" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-AuditPolicySubCategory" executed="True" result="Success" success="True" time="0.0666" asserts="0" description="Get-AuditPolicySubCategory">
            <results>
              <test-case description="Should return the second string in quotes" name="Get-AuditPolicySubCategory.Should return the second string in quotes" time="0.0666" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-AuditPolicyFlag" executed="True" result="Success" success="True" time="0.0525" asserts="0" description="Get-AuditPolicyFlag">
            <results>
              <test-case description="Should return the audit policy flag" name="Get-AuditPolicyFlag.Should return the audit policy flag" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\DnsServerRootHintRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.2454" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\DnsServerRootHintRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="DnsServerRootHintRuleClass Child Class" executed="True" result="Success" success="True" time="0.2454" asserts="0" description="DnsServerRootHintRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1268" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="DnsServerRootHintRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1268" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0557" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'HostName'" name="DnsServerRootHintRuleClass Child Class.Class Properties.Should have a property named 'HostName'" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'IpAddress'" name="DnsServerRootHintRuleClass Child Class.Class Properties.Should have a property named 'IpAddress'" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0629" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should not have more methods than are tested" name="DnsServerRootHintRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0629" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\DnsServerSettingRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.4679" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\DnsServerSettingRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="DnsServerSettingRuleClass Child Class" executed="True" result="Success" success="True" time="0.3431" asserts="0" description="DnsServerSettingRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1921" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="DnsServerSettingRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1921" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0741" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'PropertyName'" name="DnsServerSettingRuleClass Child Class.Class Properties.Should have a property named 'PropertyName'" time="0.0592" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'PropertyValue'" name="DnsServerSettingRuleClass Child Class.Class Properties.Should have a property named 'PropertyValue'" time="0.015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0768" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetDnsServerPropertyName'" name="DnsServerSettingRuleClass Child Class.Class Methods.Should have a method named 'SetDnsServerPropertyName'" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetDnsServerPropertyValue'" name="DnsServerSettingRuleClass Child Class.Class Methods.Should have a method named 'SetDnsServerPropertyValue'" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="DnsServerSettingRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-DnsServerSettingProperty" executed="True" result="Success" success="True" time="0.0716" asserts="0" description="Get-DnsServerSettingProperty">
            <results>
              <test-case description="Should return 'EventLogLevel'" name="Get-DnsServerSettingProperty.Should return 'EventLogLevel'" time="0.0716" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-DnsServerSettingPropertyValue" executed="True" result="Success" success="True" time="0.0533" asserts="0" description="Get-DnsServerSettingPropertyValue">
            <results>
              <test-case description="Should return '4'" name="Get-DnsServerSettingPropertyValue.Should return '4'" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\DocumentRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.3428" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\DocumentRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="DocumentRuleClass Child Class" executed="True" result="Success" success="True" time="0.3428" asserts="0" description="DocumentRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1382" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="DocumentRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1382" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0" asserts="0" description="Class Properties">
                <results />
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1021" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should not have more methods than are tested" name="DocumentRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.1021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Static Methods" executed="True" result="Success" success="True" time="0.1024" asserts="0" description="Static Methods">
                <results>
                  <test-case description="Should have a method named 'ConvertFrom'" name="DocumentRuleClass Child Class.Static Methods.Should have a method named 'ConvertFrom'" time="0.0727" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more static methods than are tested" name="DocumentRuleClass Child Class.Static Methods.Should not have more static methods than are tested" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\GroupRuleClass.tests.ps1" executed="True" result="Success" success="True" time="2.3219" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\GroupRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="GroupRuleClass Child Class" executed="True" result="Success" success="True" time="0.3286" asserts="0" description="GroupRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1651" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="GroupRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1651" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0689" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'GroupName'" name="GroupRuleClass Child Class.Class Properties.Should have a property named 'GroupName'" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'MembersToExclude'" name="GroupRuleClass Child Class.Class Properties.Should have a property named 'MembersToExclude'" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0946" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetGroupName'" name="GroupRuleClass Child Class.Class Methods.Should have a method named 'SetGroupName'" time="0.057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetMembersToExclude'" name="GroupRuleClass Child Class.Class Methods.Should have a method named 'SetMembersToExclude'" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="GroupRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0233" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-GroupDetail" executed="True" result="Success" success="True" time="1.9932" asserts="0" description="Get-GroupDetail">
            <results>
              <test-suite type="TestFixture" name="Test correct GroupName is returned" executed="True" result="Success" success="True" time="1.6289" asserts="0" description="Test correct GroupName is returned">
                <results>
                  <test-case description="Should be a GroupName of  'Backup Operators'" name="Get-GroupDetail.Test correct GroupName is returned.Should be a GroupName of  'Backup Operators'" time="0.8975" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should be a GroupName of  'Administrators'" name="Get-GroupDetail.Test correct GroupName is returned.Should be a GroupName of  'Administrators'" time="0.3989" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should be a GroupName of  'Hyper-V Administrators'" name="Get-GroupDetail.Test correct GroupName is returned.Should be a GroupName of  'Hyper-V Administrators'" time="0.3324" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test correct Members is returned" executed="True" result="Success" success="True" time="0.3643" asserts="0" description="Test correct Members is returned">
                <results>
                  <test-case description="Should be Members 'Domain Admins'" name="Get-GroupDetail.Test correct Members is returned.Should be Members 'Domain Admins'" time="0.3643" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\IisLoggingRuleClass.tests.ps1" executed="True" result="Success" success="True" time="1.1399" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\IisLoggingRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="IisLoggingRuleClass Child Class" executed="True" result="Success" success="True" time="0.3876" asserts="0" description="IisLoggingRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1737" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="IisLoggingRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1737" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0873" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'LogCustomFieldEntry'" name="IisLoggingRuleClass Child Class.Class Properties.Should have a property named 'LogCustomFieldEntry'" time="0.0555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'LogFlags'" name="IisLoggingRuleClass Child Class.Class Properties.Should have a property named 'LogFlags'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'LogFormat'" name="IisLoggingRuleClass Child Class.Class Properties.Should have a property named 'LogFormat'" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'LogPeriod'" name="IisLoggingRuleClass Child Class.Class Properties.Should have a property named 'LogPeriod'" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'LogTargetW3c'" name="IisLoggingRuleClass Child Class.Class Properties.Should have a property named 'LogTargetW3c'" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1266" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetLogCustomFields'" name="IisLoggingRuleClass Child Class.Class Methods.Should have a method named 'SetLogCustomFields'" time="0.0653" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetLogFlags'" name="IisLoggingRuleClass Child Class.Class Methods.Should have a method named 'SetLogFlags'" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetLogFormat'" name="IisLoggingRuleClass Child Class.Class Methods.Should have a method named 'SetLogFormat'" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetLogPeriod'" name="IisLoggingRuleClass Child Class.Class Methods.Should have a method named 'SetLogPeriod'" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetLogTargetW3c'" name="IisLoggingRuleClass Child Class.Class Methods.Should have a method named 'SetLogTargetW3c'" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetStatus'" name="IisLoggingRuleClass Child Class.Class Methods.Should have a method named 'SetStatus'" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="IisLoggingRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0185" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFlag" executed="True" result="Success" success="True" time="0.1157" asserts="0" description="Get-LogFlag">
            <results>
              <test-case description="Should return Date,Time,ClientIP,UserName,Method,UriQuery,ProtocolVersion,Referer" name="Get-LogFlag.Should return Date,Time,ClientIP,UserName,Method,UriQuery,ProtocolVersion,Referer" time="0.1157" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFormat" executed="True" result="Success" success="True" time="0.0484" asserts="0" description="Get-LogFormat">
            <results>
              <test-case description="Should return " name="Get-LogFormat.Should return " time="0.0484" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogPeriod" executed="True" result="Success" success="True" time="0.0547" asserts="0" description="Get-LogPeriod">
            <results>
              <test-case description="Should return " name="Get-LogPeriod.Should return " time="0.0547" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogTargetW3C" executed="True" result="Success" success="True" time="0.0378" asserts="0" description="Get-LogTargetW3C">
            <results>
              <test-case description="Should return " name="Get-LogTargetW3C.Should return " time="0.0378" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFlag" executed="True" result="Success" success="True" time="0.0567" asserts="0" description="Get-LogFlag">
            <results>
              <test-case description="Should return UserAgent,UserName,Referer" name="Get-LogFlag.Should return UserAgent,UserName,Referer" time="0.0567" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFormat" executed="True" result="Success" success="True" time="0.0313" asserts="0" description="Get-LogFormat">
            <results>
              <test-case description="Should return W3C" name="Get-LogFormat.Should return W3C" time="0.0313" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogPeriod" executed="True" result="Success" success="True" time="0.0293" asserts="0" description="Get-LogPeriod">
            <results>
              <test-case description="Should return " name="Get-LogPeriod.Should return " time="0.0293" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogTargetW3C" executed="True" result="Success" success="True" time="0.0505" asserts="0" description="Get-LogTargetW3C">
            <results>
              <test-case description="Should return " name="Get-LogTargetW3C.Should return " time="0.0505" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFlag" executed="True" result="Success" success="True" time="0.0249" asserts="0" description="Get-LogFlag">
            <results>
              <test-case description="Should return " name="Get-LogFlag.Should return " time="0.0249" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFormat" executed="True" result="Success" success="True" time="0.0275" asserts="0" description="Get-LogFormat">
            <results>
              <test-case description="Should return " name="Get-LogFormat.Should return " time="0.0275" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogPeriod" executed="True" result="Success" success="True" time="0.033" asserts="0" description="Get-LogPeriod">
            <results>
              <test-case description="Should return " name="Get-LogPeriod.Should return " time="0.033" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogTargetW3C" executed="True" result="Success" success="True" time="0.0395" asserts="0" description="Get-LogTargetW3C">
            <results>
              <test-case description="Should return File,ETW" name="Get-LogTargetW3C.Should return File,ETW" time="0.0395" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFlag" executed="True" result="Success" success="True" time="0.0333" asserts="0" description="Get-LogFlag">
            <results>
              <test-case description="Should return " name="Get-LogFlag.Should return " time="0.0333" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogFormat" executed="True" result="Success" success="True" time="0.0342" asserts="0" description="Get-LogFormat">
            <results>
              <test-case description="Should return " name="Get-LogFormat.Should return " time="0.0342" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogPeriod" executed="True" result="Success" success="True" time="0.0295" asserts="0" description="Get-LogPeriod">
            <results>
              <test-case description="Should return daily" name="Get-LogPeriod.Should return daily" time="0.0295" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogTargetW3C" executed="True" result="Success" success="True" time="0.0258" asserts="0" description="Get-LogTargetW3C">
            <results>
              <test-case description="Should return " name="Get-LogTargetW3C.Should return " time="0.0258" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-LogCustomFieldEntry" executed="True" result="Success" success="True" time="0.0802" asserts="0" description="Get-LogCustomFieldEntry">
            <results>
              <test-case description="Should return expected LogCustomFieldEntry object" name="Get-LogCustomFieldEntry.Should return expected LogCustomFieldEntry object" time="0.0802" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\ManualRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.2101" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\ManualRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ManualRuleClass Child Class" executed="True" result="Success" success="True" time="0.2101" asserts="0" description="ManualRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.121" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="ManualRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.121" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0" asserts="0" description="Class Properties">
                <results />
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0891" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should not have more methods than are tested" name="ManualRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0891" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\MimeTypeRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.6945" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\MimeTypeRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MimeTypeRuleClass Child Class" executed="True" result="Success" success="True" time="0.3257" asserts="0" description="MimeTypeRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1637" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="MimeTypeRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1637" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.06" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'Ensure'" name="MimeTypeRuleClass Child Class.Class Properties.Should have a property named 'Ensure'" time="0.0396" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Extension'" name="MimeTypeRuleClass Child Class.Class Properties.Should have a property named 'Extension'" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'MimeType'" name="MimeTypeRuleClass Child Class.Class Properties.Should have a property named 'MimeType'" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1021" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetExtension'" name="MimeTypeRuleClass Child Class.Class Methods.Should have a method named 'SetExtension'" time="0.0587" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetMimeType'" name="MimeTypeRuleClass Child Class.Class Methods.Should have a method named 'SetMimeType'" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetEnsure'" name="MimeTypeRuleClass Child Class.Class Methods.Should have a method named 'SetEnsure'" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="MimeTypeRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0231" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Extension" executed="True" result="Success" success="True" time="0.0707" asserts="0" description="Get-Extension">
            <results>
              <test-case description="Should return .exe" name="Get-Extension.Should return .exe" time="0.0707" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-MimeType" executed="True" result="Success" success="True" time="0.1203" asserts="0" description="Get-MimeType">
            <results>
              <test-case description="Should return application/x-bat" name="Get-MimeType.Should return application/x-bat" time="0.0888" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return application/octet-stream" name="Get-MimeType.Should return application/octet-stream" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return application/x-msdownload" name="Get-MimeType.Should return application/x-msdownload" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return application/octet-stream" name="Get-MimeType.Should return application/octet-stream" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return application/x-csh" name="Get-MimeType.Should return application/x-csh" time="0.008" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Ensure" executed="True" result="Success" success="True" time="0.0575" asserts="0" description="Get-Ensure">
            <results>
              <test-case description="Should return absent" name="Get-Ensure.Should return absent" time="0.0575" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-MultipleMimeTypeRule" executed="True" result="Success" success="True" time="0.0462" asserts="0" description="Test-MultipleMimeTypeRule">
            <results>
              <test-case description="Should return True" name="Test-MultipleMimeTypeRule.Should return True" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Split-MultipleMimeTypeRule" executed="True" result="Success" success="True" time="0.0742" asserts="0" description="Split-MultipleMimeTypeRule">
            <results>
              <test-case description="Should return 5 rules" name="Split-MultipleMimeTypeRule.Should return 5 rules" time="0.0742" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\PermissionRuleClass.tests.ps1" executed="True" result="Success" success="True" time="1.9242" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\PermissionRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PermissionRuleClass Child Class" executed="True" result="Success" success="True" time="0.5355" asserts="0" description="PermissionRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1388" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="PermissionRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1388" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0691" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'Path'" name="PermissionRuleClass Child Class.Class Properties.Should have a property named 'Path'" time="0.0591" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'AccessControlEntry'" name="PermissionRuleClass Child Class.Class Properties.Should have a property named 'AccessControlEntry'" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1641" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetPath'" name="PermissionRuleClass Child Class.Class Methods.Should have a method named 'SetPath'" time="0.074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetForce'" name="PermissionRuleClass Child Class.Class Methods.Should have a method named 'SetForce'" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetAccessControlEntry'" name="PermissionRuleClass Child Class.Class Methods.Should have a method named 'SetAccessControlEntry'" time="0.0349" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="PermissionRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.044" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Static Methods" executed="True" result="Success" success="True" time="0.1636" asserts="0" description="Static Methods">
                <results>
                  <test-case description="Should have a method named 'HasMultipleRules'" name="PermissionRuleClass Child Class.Static Methods.Should have a method named 'HasMultipleRules'" time="0.1065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SplitMultipleRules'" name="PermissionRuleClass Child Class.Static Methods.Should have a method named 'SplitMultipleRules'" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more static methods than are tested" name="PermissionRuleClass Child Class.Static Methods.Should not have more static methods than are tested" time="0.0428" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-PermissionTargetPath" executed="True" result="Success" success="True" time="1.0153" asserts="0" description="Get-PermissionTargetPath">
            <results>
              <test-case description="Should return '%windir%\SYSTEM32\WINEVT\LOGS\Security.evtx'" name="Get-PermissionTargetPath.Should return '%windir%\SYSTEM32\WINEVT\LOGS\Security.evtx'" time="0.1145" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurePipeServers\winreg\'" name="Get-PermissionTargetPath.Should return 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurePipeServers\winreg\'" time="0.1514" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKLM:\SECURITY'" name="Get-PermissionTargetPath.Should return 'HKLM:\SECURITY'" time="0.7494" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-PermissionAccessControlEntry" executed="True" result="Success" success="True" time="0.0975" asserts="0" description="Get-PermissionAccessControlEntry">
            <results>
              <test-case description="Should return expected AccessControlEntry object for target '%windir%\SYSTEM32\WINEVT\LOGS\Security.evtx'" name="Get-PermissionAccessControlEntry.Should return expected AccessControlEntry object for target '%windir%\SYSTEM32\WINEVT\LOGS\Security.evtx'" time="0.0617" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return expected AccessControlEntry object for target 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurePipeServers\winreg\'" name="Get-PermissionAccessControlEntry.Should return expected AccessControlEntry object for target 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurePipeServers\winreg\'" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return expected AccessControlEntry object for target 'HKLM:\SECURITY'" name="Get-PermissionAccessControlEntry.Should return expected AccessControlEntry object for target 'HKLM:\SECURITY'" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-MultiplePermissionRule" executed="True" result="Success" success="True" time="0.0582" asserts="0" description="Test-MultiplePermissionRule">
            <results>
              <test-case description="Should return True when multple paths found" name="Test-MultiplePermissionRule.Should return True when multple paths found" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Split-MultiplePermissionRule" executed="True" result="Success" success="True" time="0.2176" asserts="0" description="Split-MultiplePermissionRule">
            <results>
              <test-suite type="TestFixture" name="Should contain one path and not the other" executed="True" result="Success" success="True" time="0.1064" asserts="0" description="Should contain one path and not the other">
                <results>
                  <test-case description="Should match Program Files (x86) only" name="Split-MultiplePermissionRule.Should contain one path and not the other.Should match Program Files (x86) only" time="0.0845" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match Program Files only" name="Split-MultiplePermissionRule.Should contain one path and not the other.Should match Program Files only" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Should return multiple paths" name="Split-MultiplePermissionRule.Should return multiple paths" time="0.1112" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\ProcessMitigationRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.6542" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\ProcessMitigationRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ProcessMitigationRuleClass Child Class" executed="True" result="Success" success="True" time="0.3621" asserts="0" description="ProcessMitigationRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1867" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="ProcessMitigationRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1867" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0909" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'MitigationTarget'" name="ProcessMitigationRuleClass Child Class.Class Properties.Should have a property named 'MitigationTarget'" time="0.0603" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Enable'" name="ProcessMitigationRuleClass Child Class.Class Properties.Should have a property named 'Enable'" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Disable'" name="ProcessMitigationRuleClass Child Class.Class Properties.Should have a property named 'Disable'" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0846" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetMitigationTargetName'" name="ProcessMitigationRuleClass Child Class.Class Methods.Should have a method named 'SetMitigationTargetName'" time="0.0646" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetMitigationToEnable'" name="ProcessMitigationRuleClass Child Class.Class Methods.Should have a method named 'SetMitigationToEnable'" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="ProcessMitigationRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-MitigationTargetName" executed="True" result="Success" success="True" time="0.1044" asserts="0" description="Get-MitigationTargetName">
            <results>
              <test-case description="Should be a MitigationTarget of 'System'" name="Get-MitigationTargetName.Should be a MitigationTarget of 'System'" time="0.072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be a MitigationTarget of 'wordpad.exe'" name="Get-MitigationTargetName.Should be a MitigationTarget of 'wordpad.exe'" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be a MitigationTarget of 'java.exe,javaw.exe,javaws.exe'" name="Get-MitigationTargetName.Should be a MitigationTarget of 'java.exe,javaw.exe,javaws.exe'" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should be a MitigationTarget of 'System'" name="Get-MitigationTargetName.Should be a MitigationTarget of 'System'" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-MitigationPolicyToEnable" executed="True" result="Success" success="True" time="0.1876" asserts="0" description="Get-MitigationPolicyToEnable">
            <results>
              <test-case description="Should have Enable equal to: 'TerminateOnError'" name="Get-MitigationPolicyToEnable.Should have Enable equal to: 'TerminateOnError'" time="0.0906" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have Enable equal to: 'DEP,EnableExportAddressFilter,EnableExportAddressFilterPlus,EnableImportAddressFilter,EnableRopStackPivot,EnableRopCallerCheck,EnableRopSimExec'" name="Get-MitigationPolicyToEnable.Should have Enable equal to: 'DEP,EnableExportAddressFilter,EnableExportAddressFilterPlus,EnableImportAddressFilter,EnableRopStackPivot,EnableRopCallerCheck,EnableRopSimExec'" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have Enable equal to: 'DEP,EnableExportAddressFilter,EnableExportAddressFilterPlus,EnableImportAddressFilter,EnableRopStackPivot,EnableRopCallerCheck,EnableRopSimExec'" name="Get-MitigationPolicyToEnable.Should have Enable equal to: 'DEP,EnableExportAddressFilter,EnableExportAddressFilterPlus,EnableImportAddressFilter,EnableRopStackPivot,EnableRopCallerCheck,EnableRopSimExec'" time="0.0406" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have Enable equal to: 'DEP'" name="Get-MitigationPolicyToEnable.Should have Enable equal to: 'DEP'" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\RegistryRuleClass.tests.ps1" executed="True" result="Success" success="True" time="2.8061" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\RegistryRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="RegistryRuleClass Child Class" executed="True" result="Success" success="True" time="0.5195" asserts="0" description="RegistryRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1577" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="RegistryRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1577" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.1124" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'Key'" name="RegistryRuleClass Child Class.Class Properties.Should have a property named 'Key'" time="0.0689" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'ValueName'" name="RegistryRuleClass Child Class.Class Properties.Should have a property named 'ValueName'" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'ValueData'" name="RegistryRuleClass Child Class.Class Properties.Should have a property named 'ValueData'" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'ValueType'" name="RegistryRuleClass Child Class.Class Properties.Should have a property named 'ValueType'" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Ensure'" name="RegistryRuleClass Child Class.Class Properties.Should have a property named 'Ensure'" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.2494" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'FormatMultiStringRegistryData'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'FormatMultiStringRegistryData'" time="0.0579" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetIntegerFromHex'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'GetIntegerFromHex'" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetNumberFromString'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'GetNumberFromString'" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetMultiValueRegistryStringData'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'GetMultiValueRegistryStringData'" time="0.0177" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetValidEnabledOrDisabled'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'GetValidEnabledOrDisabled'" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsDataBlank'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'IsDataBlank'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsDataEnabledOrDisabled'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'IsDataEnabledOrDisabled'" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsDataHexCode'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'IsDataHexCode'" time="0.0212" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsDataInteger'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'IsDataInteger'" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetEnsureFlag'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'SetEnsureFlag'" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetKey'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'SetKey'" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetValueData'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'GetValueData'" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetValueName'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'SetValueName'" time="0.0157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetValueType'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'SetValueType'" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'TestValueDataStringForRange'" name="RegistryRuleClass Child Class.Class Methods.Should have a method named 'TestValueDataStringForRange'" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="RegistryRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0259" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryKey" executed="True" result="Success" success="True" time="0.2561" asserts="0" description="Get-RegistryKey">
            <results>
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\WindowsMediaPlayer'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\WindowsMediaPlayer'" time="0.0926" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\Config'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\Config'" time="0.0178" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Subsystems'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Subsystems'" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon'" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\MSV1_0'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\MSV1_0'" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa'" time="0.022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\mscfile\shell\runasuser'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\mscfile\shell\runasuser'" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\exefile\shell\runasuser'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\exefile\shell\runasuser'" time="0.0212" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\cmdfile\shell\runasuser'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\cmdfile\shell\runasuser'" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\batfile\shell\runasuser'" name="Get-RegistryKey.Should return 'HKEY_LOCAL_MACHINE\SOFTWARE\Classes\batfile\shell\runasuser'" time="0.0109" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueType" executed="True" result="Success" success="True" time="0.1821" asserts="0" description="Get-RegistryValueType">
            <results>
              <test-case description="Should return 'DWORD'" name="Get-RegistryValueType.Should return 'DWORD'" time="0.0968" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'DWORD'" name="Get-RegistryValueType.Should return 'DWORD'" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'MultiString'" name="Get-RegistryValueType.Should return 'MultiString'" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'String'" name="Get-RegistryValueType.Should return 'String'" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'DWORD'" name="Get-RegistryValueType.Should return 'DWORD'" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'String'" name="Get-RegistryValueType.Should return 'String'" time="0.0211" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Dword'" name="Get-RegistryValueType.Should return 'Dword'" time="0.015" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueName" executed="True" result="Success" success="True" time="0.1624" asserts="0" description="Get-RegistryValueName">
            <results>
              <test-case description="Should return 'GroupPrivacyAcceptance'" name="Get-RegistryValueName.Should return 'GroupPrivacyAcceptance'" time="0.0881" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'EventLogFlags'" name="Get-RegistryValueName.Should return 'EventLogFlags'" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Optional'" name="Get-RegistryValueName.Should return 'Optional'" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'ScreenSaverGracePeriod'" name="Get-RegistryValueName.Should return 'ScreenSaverGracePeriod'" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'NTLMMinServerSec'" name="Get-RegistryValueName.Should return 'NTLMMinServerSec'" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'RestrictRemoteSAM'" name="Get-RegistryValueName.Should return 'RestrictRemoteSAM'" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'SuppressionPolicy'" name="Get-RegistryValueName.Should return 'SuppressionPolicy'" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryValueData" executed="True" result="Success" success="True" time="0.1309" asserts="0" description="Get-RegistryValueData">
            <results>
              <test-case description="Should return '1'" name="Get-RegistryValueData.Should return '1'" time="0.0842" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return ''" name="Get-RegistryValueData.Should return ''" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '537395200'" name="Get-RegistryValueData.Should return '537395200'" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'O:BAG:BAD:(A;;RC;;;BA)'" name="Get-RegistryValueData.Should return 'O:BAG:BAD:(A;;RC;;;BA)'" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '4096'" name="Get-RegistryValueData.Should return '4096'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryHiveFromWindowsStig" executed="True" result="Success" success="True" time="0.147" asserts="0" description="Get-RegistryHiveFromWindowsStig">
            <results>
              <test-case description="Should return 'HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig.Should return 'HKEY_LOCAL_MACHINE'" time="0.0794" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig.Should return 'HKEY_LOCAL_MACHINE'" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig.Should return 'HKEY_LOCAL_MACHINE'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig.Should return 'HKEY_LOCAL_MACHINE'" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig.Should return 'HKEY_LOCAL_MACHINE'" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig.Should return 'HKEY_LOCAL_MACHINE'" time="0.0109" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'HKEY_LOCAL_MACHINE'" name="Get-RegistryHiveFromWindowsStig.Should return 'HKEY_LOCAL_MACHINE'" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RegistryPathFromWindowsStig" executed="True" result="Success" success="True" time="0.1699" asserts="0" description="Get-RegistryPathFromWindowsStig">
            <results>
              <test-case description="Should return '\Software\Policies\Microsoft\WindowsMediaPlayer'" name="Get-RegistryPathFromWindowsStig.Should return '\Software\Policies\Microsoft\WindowsMediaPlayer'" time="0.0755" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\System\CurrentControlSet\Services\W32Time\Config'" name="Get-RegistryPathFromWindowsStig.Should return '\System\CurrentControlSet\Services\W32Time\Config'" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\System\CurrentControlSet\Control\Session Manager\Subsystems'" name="Get-RegistryPathFromWindowsStig.Should return '\System\CurrentControlSet\Control\Session Manager\Subsystems'" time="0.022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\Software\Microsoft\Windows NT\CurrentVersion\Winlogon'" name="Get-RegistryPathFromWindowsStig.Should return '\Software\Microsoft\Windows NT\CurrentVersion\Winlogon'" time="0.014" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\System\CurrentControlSet\Control\Lsa\MSV1_0'" name="Get-RegistryPathFromWindowsStig.Should return '\System\CurrentControlSet\Control\Lsa\MSV1_0'" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SYSTEM\CurrentControlSet\Control\Lsa'" name="Get-RegistryPathFromWindowsStig.Should return '\SYSTEM\CurrentControlSet\Control\Lsa'" time="0.011" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '\SOFTWARE\Classes\batfile\shell\runasuser \SOFTWARE\Classes\cmdfile\shell\runasuser \SOFTWARE\Classes\exefile\shell\runasuser \SOFTWARE\Classes\mscfile\shell\runasuser'" name="Get-RegistryPathFromWindowsStig.Should return '\SOFTWARE\Classes\batfile\shell\runasuser \SOFTWARE\Classes\cmdfile\shell\runasuser \SOFTWARE\Classes\exefile\shell\runasuser \SOFTWARE\Classes\mscfile\shell\runasuser'" time="0.0267" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-RegistryValueDataContainsRange" executed="True" result="Success" success="True" time="0.2011" asserts="0" description="Test-RegistryValueDataContainsRange">
            <results>
              <test-case description="Should return 'False'" name="Test-RegistryValueDataContainsRange.Should return 'False'" time="0.0693" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataContainsRange.Should return 'True'" time="0.0265" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataContainsRange.Should return 'False'" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataContainsRange.Should return 'True'" time="0.0157" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataContainsRange.Should return 'False'" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataContainsRange.Should return 'False'" time="0.016" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataContainsRange.Should return 'False'" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-RegistryValueDataIsBlank" executed="True" result="Success" success="True" time="0.1598" asserts="0" description="Test-RegistryValueDataIsBlank">
            <results>
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsBlank.Should return 'False'" time="0.0726" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsBlank.Should return 'False'" time="0.017" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsBlank.Should return 'True'" time="0.0217" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsBlank.Should return 'False'" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsBlank.Should return 'False'" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsBlank.Should return 'False'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsBlank.Should return 'False'" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-IsValidDword" executed="True" result="Success" success="True" time="0.1646" asserts="0" description="Test-IsValidDword">
            <results>
              <test-case description="Should return 'True'" name="Test-IsValidDword.Should return 'True'" time="0.0756" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-IsValidDword.Should return 'False'" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-IsValidDword.Should return 'False'" time="0.0166" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-IsValidDword.Should return 'False'" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-IsValidDword.Should return 'False'" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-IsValidDword.Should return 'False'" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-IsValidDword.Should return 'False'" time="0.0222" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-RegistryValueDataIsInteger" executed="True" result="Success" success="True" time="0.1971" asserts="0" description="Test-RegistryValueDataIsInteger">
            <results>
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsInteger.Should return 'True'" time="0.0971" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsInteger.Should return 'True'" time="0.0141" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsInteger.Should return 'False'" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsInteger.Should return 'True'" time="0.0191" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsInteger.Should return 'True'" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsInteger.Should return 'False'" time="0.0206" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsInteger.Should return 'True'" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-NumberFromString" executed="True" result="Success" success="True" time="0.1846" asserts="0" description="Get-NumberFromString">
            <results>
              <test-case description="Should return '1'" name="Get-NumberFromString.Should return '1'" time="0.0798" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return error" name="Get-NumberFromString.Should return error" time="0.0588" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '537395200'" name="Get-NumberFromString.Should return '537395200'" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return error" name="Get-NumberFromString.Should return error" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '4096'" name="Get-NumberFromString.Should return '4096'" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-RegistryValueDataIsHexCode" executed="True" result="Success" success="True" time="0.1379" asserts="0" description="Test-RegistryValueDataIsHexCode">
            <results>
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsHexCode.Should return 'False'" time="0.06" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsHexCode.Should return 'False'" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsHexCode.Should return 'False'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsHexCode.Should return 'False'" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsHexCode.Should return 'True'" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'False'" name="Test-RegistryValueDataIsHexCode.Should return 'False'" time="0.01" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'True'" name="Test-RegistryValueDataIsHexCode.Should return 'True'" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-IntegerFromHex" executed="True" result="Success" success="True" time="0.1932" asserts="0" description="Get-IntegerFromHex">
            <results>
              <test-case description="Should return an error" name="Get-IntegerFromHex.Should return an error" time="0.0803" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return an error" name="Get-IntegerFromHex.Should return an error" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return an error" name="Get-IntegerFromHex.Should return an error" time="0.023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return an error" name="Get-IntegerFromHex.Should return an error" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '537395200'" name="Get-IntegerFromHex.Should return '537395200'" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return an error" name="Get-IntegerFromHex.Should return an error" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return '4096'" name="Get-IntegerFromHex.Should return '4096'" time="0.0201" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\SecurityOptionRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.5661" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\SecurityOptionRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="SecurityOptionRuleClass Child Class" executed="True" result="Success" success="True" time="0.3739" asserts="0" description="SecurityOptionRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1554" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="SecurityOptionRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1554" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0962" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'OptionName'" name="SecurityOptionRuleClass Child Class.Class Properties.Should have a property named 'OptionName'" time="0.0867" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'OptionValue'" name="SecurityOptionRuleClass Child Class.Class Properties.Should have a property named 'OptionValue'" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1224" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetOptionName'" name="SecurityOptionRuleClass Child Class.Class Methods.Should have a method named 'SetOptionName'" time="0.0624" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'TestOptionValueForRange'" name="SecurityOptionRuleClass Child Class.Class Methods.Should have a method named 'TestOptionValueForRange'" time="0.017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetOptionValue'" name="SecurityOptionRuleClass Child Class.Class Methods.Should have a method named 'SetOptionValue'" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetOptionValueRange'" name="SecurityOptionRuleClass Child Class.Class Methods.Should have a method named 'SetOptionValueRange'" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="SecurityOptionRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.017" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-SecurityOptionName" executed="True" result="Success" success="True" time="0.1021" asserts="0" description="Get-SecurityOptionName">
            <results>
              <test-case description="Should return 'Accounts: Guest account status'" name="Get-SecurityOptionName.Should return 'Accounts: Guest account status'" time="0.0859" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Accounts: Rename guest account'" name="Get-SecurityOptionName.Should return 'Accounts: Rename guest account'" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Network security: Force logoff when logon hours expire'" name="Get-SecurityOptionName.Should return 'Network security: Force logoff when logon hours expire'" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-SecurityOptionValue" executed="True" result="Success" success="True" time="0.0901" asserts="0" description="Get-SecurityOptionValue">
            <results>
              <test-case description="Should return 'Disabled'" name="Get-SecurityOptionValue.Should return 'Disabled'" time="0.0637" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Guest'" name="Get-SecurityOptionValue.Should return 'Guest'" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Enabled'" name="Get-SecurityOptionValue.Should return 'Enabled'" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\ServiceRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.9638" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\ServiceRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ServiceRuleClass Child Class" executed="True" result="Success" success="True" time="0.491" asserts="0" description="ServiceRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1496" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="ServiceRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1496" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.1028" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'ServiceName'" name="ServiceRuleClass Child Class.Class Properties.Should have a property named 'ServiceName'" time="0.0592" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'ServiceState'" name="ServiceRuleClass Child Class.Class Properties.Should have a property named 'ServiceState'" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'StartupType'" name="ServiceRuleClass Child Class.Class Properties.Should have a property named 'StartupType'" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Ensure'" name="ServiceRuleClass Child Class.Class Properties.Should have a property named 'Ensure'" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1242" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetServiceName'" name="ServiceRuleClass Child Class.Class Methods.Should have a method named 'SetServiceName'" time="0.0704" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetServiceState'" name="ServiceRuleClass Child Class.Class Methods.Should have a method named 'SetServiceState'" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetStartupType'" name="ServiceRuleClass Child Class.Class Methods.Should have a method named 'SetStartupType'" time="0.0178" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="ServiceRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0209" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Static Methods" executed="True" result="Success" success="True" time="0.1144" asserts="0" description="Static Methods">
                <results>
                  <test-case description="Should have a method named 'HasMultipleRules'" name="ServiceRuleClass Child Class.Static Methods.Should have a method named 'HasMultipleRules'" time="0.077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SplitMultipleRules'" name="ServiceRuleClass Child Class.Static Methods.Should have a method named 'SplitMultipleRules'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more static methods than are tested" name="ServiceRuleClass Child Class.Static Methods.Should not have more static methods than are tested" time="0.027" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ServiceName" executed="True" result="Success" success="True" time="0.1205" asserts="0" description="Get-ServiceName">
            <results>
              <test-case description="Should return 'McAfee'" name="Get-ServiceName.Should return 'McAfee'" time="0.0787" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'SCPolicySvc'" name="Get-ServiceName.Should return 'SCPolicySvc'" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'simptcp'" name="Get-ServiceName.Should return 'simptcp'" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'FTPSVC'" name="Get-ServiceName.Should return 'FTPSVC'" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return ''" name="Get-ServiceName.Should return ''" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ServiceState" executed="True" result="Success" success="True" time="0.1165" asserts="0" description="Get-ServiceState">
            <results>
              <test-case description="Should return 'Running' from 'McAfee'" name="Get-ServiceState.Should return 'Running' from 'McAfee'" time="0.0663" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Running' from 'SCPolicySvc'" name="Get-ServiceState.Should return 'Running' from 'SCPolicySvc'" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Stopped' from 'simptcp'" name="Get-ServiceState.Should return 'Stopped' from 'simptcp'" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Stopped' from 'FTPSVC'" name="Get-ServiceState.Should return 'Stopped' from 'FTPSVC'" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Stopped' from ''" name="Get-ServiceState.Should return 'Stopped' from ''" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ServiceStartupType" executed="True" result="Success" success="True" time="0.0998" asserts="0" description="Get-ServiceStartupType">
            <results>
              <test-case description="Should return 'Automatic' from 'McAfee'" name="Get-ServiceStartupType.Should return 'Automatic' from 'McAfee'" time="0.0615" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Automatic' from 'SCPolicySvc'" name="Get-ServiceStartupType.Should return 'Automatic' from 'SCPolicySvc'" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Disabled' from 'simptcp'" name="Get-ServiceStartupType.Should return 'Disabled' from 'simptcp'" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Disabled' from 'FTPSVC'" name="Get-ServiceStartupType.Should return 'Disabled' from 'FTPSVC'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Disabled' from ''" name="Get-ServiceStartupType.Should return 'Disabled' from ''" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-MultipleServiceRule" executed="True" result="Success" success="True" time="0.136" asserts="0" description="Test-MultipleServiceRule">
            <results>
              <test-case description="Should return True if a Multiple Services are found " name="Test-MultipleServiceRule.Should return True if a Multiple Services are found " time="0.0624" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False if a comma is found " name="Test-MultipleServiceRule.Should return False if a comma is found " time="0.021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False if a null value is passed" name="Test-MultipleServiceRule.Should return False if a null value is passed" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should not thrown an error if a null value is passed" name="Test-MultipleServiceRule.Should not thrown an error if a null value is passed" time="0.027" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\SqlScriptRule.tests.ps1" executed="True" result="Success" success="True" time="1.2473" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\SqlScriptRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="SqlScriptRule Child Class" executed="True" result="Success" success="True" time="0.3748" asserts="0" description="SqlScriptRule Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1471" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="SqlScriptRule Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1471" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0829" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'GetScript'" name="SqlScriptRule Child Class.Class Properties.Should have a property named 'GetScript'" time="0.0663" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'TestScript'" name="SqlScriptRule Child Class.Class Properties.Should have a property named 'TestScript'" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'SetScript'" name="SqlScriptRule Child Class.Class Properties.Should have a property named 'SetScript'" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1448" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetGetScript'" name="SqlScriptRule Child Class.Class Methods.Should have a method named 'SetGetScript'" time="0.0734" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetTestScript'" name="SqlScriptRule Child Class.Class Methods.Should have a method named 'SetTestScript'" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetSetScript'" name="SqlScriptRule Child Class.Class Methods.Should have a method named 'SetSetScript'" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetRuleType'" name="SqlScriptRule Child Class.Class Methods.Should have a method named 'GetRuleType'" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="SqlScriptRule Child Class.Class Methods.Should not have more methods than are tested" time="0.0334" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Method Function Tests" executed="True" result="Success" success="True" time="0.8725" asserts="0" description="Method Function Tests">
            <results>
              <test-suite type="TestFixture" name="'Permission' Get-SqlRuleType" executed="True" result="Success" success="True" time="0.1448" asserts="0" description="'Permission' Get-SqlRuleType">
                <results>
                  <test-case description="Should return Permission" name="Method Function Tests.'Permission' Get-SqlRuleType.Should return Permission" time="0.1448" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'Permission' GetScript" executed="True" result="Success" success="True" time="0.0868" asserts="0" description="'Permission' GetScript">
                <results>
                  <test-case description="Should return a Permission GetScript" name="Method Function Tests.'Permission' GetScript.Should return a Permission GetScript" time="0.0868" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'Permission' TestScript" executed="True" result="Success" success="True" time="0.069" asserts="0" description="'Permission' TestScript">
                <results>
                  <test-case description="Should return a Permission TestScript" name="Method Function Tests.'Permission' TestScript.Should return a Permission TestScript" time="0.069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'Permission' SetScript" executed="True" result="Success" success="True" time="0.0838" asserts="0" description="'Permission' SetScript">
                <results>
                  <test-case description="Should return a Permission SetScript" name="Method Function Tests.'Permission' SetScript.Should return a Permission SetScript" time="0.0838" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'Trace' Get-SqlRuleType" executed="True" result="Success" success="True" time="0.0438" asserts="0" description="'Trace' Get-SqlRuleType">
                <results>
                  <test-case description="Should return Trace" name="Method Function Tests.'Trace' Get-SqlRuleType.Should return Trace" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'Trace' GetScript" executed="True" result="Success" success="True" time="0.0409" asserts="0" description="'Trace' GetScript">
                <results>
                  <test-case description="Should return a Trace GetScript" name="Method Function Tests.'Trace' GetScript.Should return a Trace GetScript" time="0.0409" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'Trace' TestScript" executed="True" result="Success" success="True" time="0.06" asserts="0" description="'Trace' TestScript">
                <results>
                  <test-case description="Should return a Trace TestScript" name="Method Function Tests.'Trace' TestScript.Should return a Trace TestScript" time="0.06" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'Trace' SetScript" executed="True" result="Success" success="True" time="0.0409" asserts="0" description="'Trace' SetScript">
                <results>
                  <test-case description="Should return a Trace SetScript" name="Method Function Tests.'Trace' SetScript.Should return a Trace SetScript" time="0.0409" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'DbExist' Get-SqlRuleType" executed="True" result="Success" success="True" time="0.0522" asserts="0" description="'DbExist' Get-SqlRuleType">
                <results>
                  <test-case description="Should return DbExist" name="Method Function Tests.'DbExist' Get-SqlRuleType.Should return DbExist" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'DbExist' GetScript" executed="True" result="Success" success="True" time="0.0471" asserts="0" description="'DbExist' GetScript">
                <results>
                  <test-case description="Should return a DbExist GetScript" name="Method Function Tests.'DbExist' GetScript.Should return a DbExist GetScript" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'DbExist' TestScript" executed="True" result="Success" success="True" time="0.0356" asserts="0" description="'DbExist' TestScript">
                <results>
                  <test-case description="Should return a DbExist TestScript" name="Method Function Tests.'DbExist' TestScript.Should return a DbExist TestScript" time="0.0356" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="'DbExist' SetScript" executed="True" result="Success" success="True" time="0.0369" asserts="0" description="'DbExist' SetScript">
                <results>
                  <test-case description="Should return a DbExist SetScript" name="Method Function Tests.'DbExist' SetScript.Should return a DbExist SetScript" time="0.0369" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-Query" executed="True" result="Success" success="True" time="0.0596" asserts="0" description="Get-Query">
                <results>
                  <test-case description="Should return 3 queries" name="Method Function Tests.Get-Query.Should return 3 queries" time="0.0596" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SQL Trace Rule functions" executed="True" result="Success" success="True" time="0.071" asserts="0" description="SQL Trace Rule functions">
                <results>
                  <test-case description="Should return Trace Id Query" name="Method Function Tests.SQL Trace Rule functions.Should return Trace Id Query" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return Event Id Data" name="Method Function Tests.SQL Trace Rule functions.Should return Event Id Data" time="0.0178" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\StigClass.tests.ps1" executed="True" result="Success" success="True" time="2.3455" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\StigClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="StigClass Base Class" executed="True" result="Success" success="True" time="0.7493" asserts="0" description="StigClass Base Class">
            <results>
              <test-suite type="TestFixture" name="InvokeClass with Stigdata element" executed="True" result="Success" success="True" time="0.2269" asserts="0" description="InvokeClass with Stigdata element">
                <results>
                  <test-case description="Should return the rule Id" name="StigClass Base Class.InvokeClass with Stigdata element.Should return the rule Id" time="0.0434" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the Severity" name="StigClass Base Class.InvokeClass with Stigdata element.Should return the Severity" time="0.0353" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the Title" name="StigClass Base Class.InvokeClass with Stigdata element.Should return the Title" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the default status of pass" name="StigClass Base Class.InvokeClass with Stigdata element.Should return the default status of pass" time="0.0276" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the raw string" name="StigClass Base Class.InvokeClass with Stigdata element.Should return the raw string" time="0.0175" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return decoded html in the rawString" name="StigClass Base Class.InvokeClass with Stigdata element.Should return decoded html in the rawString" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should set IsNullOrEmptyt to false by default" name="StigClass Base Class.InvokeClass with Stigdata element.Should set IsNullOrEmptyt to false by default" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should set OrganizationValueRequired to false by default" name="StigClass Base Class.InvokeClass with Stigdata element.Should set OrganizationValueRequired to false by default" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should OrganizationValueTestString to empty by default" name="StigClass Base Class.InvokeClass with Stigdata element.Should OrganizationValueTestString to empty by default" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Methods" executed="True" result="Success" success="True" time="0.2771" asserts="0" description="Methods">
                <results>
                  <test-case description="Should have a method named 'Clone'" name="StigClass Base Class.Methods.Should have a method named 'Clone'" time="0.0617" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsDuplicateRule'" name="StigClass Base Class.Methods.Should have a method named 'IsDuplicateRule'" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetDuplicateTitle'" name="StigClass Base Class.Methods.Should have a method named 'SetDuplicateTitle'" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetStatus'" name="StigClass Base Class.Methods.Should have a method named 'SetStatus'" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetIsNullOrEmpty'" name="StigClass Base Class.Methods.Should have a method named 'SetIsNullOrEmpty'" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetOrganizationValueRequired'" name="StigClass Base Class.Methods.Should have a method named 'SetOrganizationValueRequired'" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetOrganizationValueTestString'" name="StigClass Base Class.Methods.Should have a method named 'GetOrganizationValueTestString'" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'ConvertToHashTable'" name="StigClass Base Class.Methods.Should have a method named 'ConvertToHashTable'" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetStigRuleResource'" name="StigClass Base Class.Methods.Should have a method named 'SetStigRuleResource'" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsHardCoded'" name="StigClass Base Class.Methods.Should have a method named 'IsHardCoded'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetHardCodedString'" name="StigClass Base Class.Methods.Should have a method named 'GetHardCodedString'" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsHardCodedOrganizationValueTestString'" name="StigClass Base Class.Methods.Should have a method named 'IsHardCodedOrganizationValueTestString'" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetHardCodedOrganizationValueTestString'" name="StigClass Base Class.Methods.Should have a method named 'GetHardCodedOrganizationValueTestString'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsExistingRule'" name="StigClass Base Class.Methods.Should have a method named 'IsExistingRule'" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'Equals'" name="StigClass Base Class.Methods.Should have a method named 'Equals'" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetHashCode'" name="StigClass Base Class.Methods.Should have a method named 'GetHashCode'" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetType'" name="StigClass Base Class.Methods.Should have a method named 'GetType'" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'ToString'" name="StigClass Base Class.Methods.Should have a method named 'ToString'" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="StigClass Base Class.Methods.Should not have more methods than are tested" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Static Methods" executed="True" result="Success" success="True" time="0.102" asserts="0" description="Static Methods">
                <results>
                  <test-case description="Should have a method named 'SplitCheckContent'" name="StigClass Base Class.Static Methods.Should have a method named 'SplitCheckContent'" time="0.0603" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetRuleTypeMatchList'" name="StigClass Base Class.Static Methods.Should have a method named 'GetRuleTypeMatchList'" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'GetFixText'" name="StigClass Base Class.Static Methods.Should have a method named 'GetFixText'" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more static methods than are tested" name="StigClass Base Class.Static Methods.Should not have more static methods than are tested" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Should be of BaseType 'System.Object'" name="StigClass Base Class.Should be of BaseType 'System.Object'" time="0.1433" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="SplitCheckContent static method" executed="True" result="Success" success="True" time="0.0789" asserts="0" description="SplitCheckContent static method">
            <results>
              <test-case description="Should trim strings and remove empty lines" name="SplitCheckContent static method.Should trim strings and remove empty lines" time="0.0789" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Encoding functions" executed="True" result="Success" success="True" time="0.1815" asserts="0" description="Encoding functions">
            <results>
              <test-suite type="TestFixture" name="Test-HtmlEncoding" executed="True" result="Success" success="True" time="0.1058" asserts="0" description="Test-HtmlEncoding">
                <results>
                  <test-case description="Should return true when encoded characters are found" name="Encoding functions.Test-HtmlEncoding.Should return true when encoded characters are found" time="0.0875" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return false when encoded characters are found" name="Encoding functions.Test-HtmlEncoding.Should return false when encoded characters are found" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-HtmlEncoding" executed="True" result="Success" success="True" time="0.0756" asserts="0" description="Test-HtmlEncoding">
                <results>
                  <test-case description="Should decode html encoding" name="Encoding functions.Test-HtmlEncoding.Should decode html encoding" time="0.0756" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-RuleTypeMatchList" executed="True" result="Success" success="True" time="1.3358" asserts="0" description="Get-RuleTypeMatchList">
            <results>
              <test-suite type="TestFixture" name="AccountPolicyRule" executed="True" result="Success" success="True" time="0.2524" asserts="0" description="AccountPolicyRule">
                <results>
                  <test-case description="Should return AccountPolicyRule when 'Account Policies' is found" name="Get-RuleTypeMatchList.AccountPolicyRule.Should return AccountPolicyRule when 'Account Policies' is found" time="0.2524" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="AccountPolicyRule" executed="True" result="Success" success="True" time="0.102" asserts="0" description="AccountPolicyRule">
                <results>
                  <test-case description="Should return 'AuditPolicyRule' when 'auditpol.exe' is found" name="Get-RuleTypeMatchList.AccountPolicyRule.Should return 'AuditPolicyRule' when 'auditpol.exe' is found" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'ManualRule' when 'resourceSACL' is found" name="Get-RuleTypeMatchList.AccountPolicyRule.Should return 'ManualRule' when 'resourceSACL' is found" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should NOT return 'AuditPolicyRule' when 'SCENoApplyLegacyAuditPolicy' is found" name="Get-RuleTypeMatchList.AccountPolicyRule.Should NOT return 'AuditPolicyRule' when 'SCENoApplyLegacyAuditPolicy' is found" time="0.0188" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DnsServerSettingRule" executed="True" result="Success" success="True" time="0.089" asserts="0" description="DnsServerSettingRule">
                <results>
                  <test-case description="Should return 'DnsServerSettingRule' when only 'dnsmgmt.msc' is found" name="Get-RuleTypeMatchList.DnsServerSettingRule.Should return 'DnsServerSettingRule' when only 'dnsmgmt.msc' is found" time="0.0677" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return 'DnsServerSettingRule' when 'dnsmgmt.msc and 'Forward Lookup Zones is found" name="Get-RuleTypeMatchList.DnsServerSettingRule.Should not return 'DnsServerSettingRule' when 'dnsmgmt.msc and 'Forward Lookup Zones is found" time="0.0213" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DocumentRule" executed="True" result="Success" success="True" time="0.0709" asserts="0" description="DocumentRule">
                <results>
                  <test-case description="Should return 'DocumentRule' when 'Document' is found" name="Get-RuleTypeMatchList.DocumentRule.Should return 'DocumentRule' when 'Document' is found" time="0.0709" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ManualRule" executed="True" result="Success" success="True" time="0.0623" asserts="0" description="ManualRule">
                <results>
                  <test-case description="Should return 'ManualRule' when nothing else is found" name="Get-RuleTypeMatchList.ManualRule.Should return 'ManualRule' when nothing else is found" time="0.0623" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PermissionRule" executed="True" result="Success" success="True" time="0.0884" asserts="0" description="PermissionRule">
                <results>
                  <test-case description="Should return 'PermissionRule' when 'eventvwr.msc and Logs\Microsoft' is found" name="Get-RuleTypeMatchList.PermissionRule.Should return 'PermissionRule' when 'eventvwr.msc and Logs\Microsoft' is found" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'PermissionRule' when 'Verify the permissions on Group Policy objects' is found" name="Get-RuleTypeMatchList.PermissionRule.Should Not return 'PermissionRule' when 'Verify the permissions on Group Policy objects' is found" time="0.0181" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'PermissionRule' when 'Devices and Printers permissions' is found" name="Get-RuleTypeMatchList.PermissionRule.Should Not return 'PermissionRule' when 'Devices and Printers permissions' is found" time="0.0199" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RegistryRule" executed="True" result="Success" success="True" time="0.1573" asserts="0" description="RegistryRule">
                <results>
                  <test-case description="Should return 'RegistryRule' when 'HKEY_LOCAL_MACHINE' is found" name="Get-RuleTypeMatchList.RegistryRule.Should return 'RegistryRule' when 'HKEY_LOCAL_MACHINE' is found" time="0.0833" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'RegistryRule' when 'Permission' is found" name="Get-RuleTypeMatchList.RegistryRule.Should Not return 'RegistryRule' when 'Permission' is found" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'RegistryRule' when 'SupportedEncryptionTypes' is found" name="Get-RuleTypeMatchList.RegistryRule.Should Not return 'RegistryRule' when 'SupportedEncryptionTypes' is found" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SecurityOptionRule" executed="True" result="Success" success="True" time="0.0932" asserts="0" description="SecurityOptionRule">
                <results>
                  <test-case description="Should return 'SecurityOptionRule' when 'gpedit and Security Option' is found" name="Get-RuleTypeMatchList.SecurityOptionRule.Should return 'SecurityOptionRule' when 'gpedit and Security Option' is found" time="0.0595" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'SecurityOptionRule' when 'gpedit and Account Policy' are found" name="Get-RuleTypeMatchList.SecurityOptionRule.Should Not return 'SecurityOptionRule' when 'gpedit and Account Policy' are found" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'SecurityOptionRule' when 'gpedit and User Rights Assignment' are found" name="Get-RuleTypeMatchList.SecurityOptionRule.Should Not return 'SecurityOptionRule' when 'gpedit and User Rights Assignment' are found" time="0.0178" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ServiceRule" executed="True" result="Success" success="True" time="0.0925" asserts="0" description="ServiceRule">
                <results>
                  <test-case description="Should return 'ServiceRule' when 'services.msc' is found" name="Get-RuleTypeMatchList.ServiceRule.Should return 'ServiceRule' when 'services.msc' is found" time="0.0573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'ServiceRule' when 'Required Services' is found" name="Get-RuleTypeMatchList.ServiceRule.Should Not return 'ServiceRule' when 'Required Services' is found" time="0.0201" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'ServiceRule' when 'presence of applications' is found" name="Get-RuleTypeMatchList.ServiceRule.Should Not return 'ServiceRule' when 'presence of applications' is found" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="UserRightRule" executed="True" result="Success" success="True" time="0.0894" asserts="0" description="UserRightRule">
                <results>
                  <test-case description="Should return 'UserRightRule' when 'gpedit and Security Option' is found" name="Get-RuleTypeMatchList.UserRightRule.Should return 'UserRightRule' when 'gpedit and Security Option' is found" time="0.0573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'UserRightRule' when 'gpedit and Account Policy' are found" name="Get-RuleTypeMatchList.UserRightRule.Should Not return 'UserRightRule' when 'gpedit and Account Policy' are found" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'UserRightRule' when 'gpedit and Security Option' are found" name="Get-RuleTypeMatchList.UserRightRule.Should Not return 'UserRightRule' when 'gpedit and Security Option' are found" time="0.0157" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="WindowsFeatureRule" executed="True" result="Success" success="True" time="0.0754" asserts="0" description="WindowsFeatureRule">
                <results>
                  <test-case description="Should return 'WindowsFeatureRule' when 'Get-WindowsFeature' is found" name="Get-RuleTypeMatchList.WindowsFeatureRule.Should return 'WindowsFeatureRule' when 'Get-WindowsFeature' is found" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'WindowsFeatureRule' when 'Get-WindowsOptionalFeature' is found" name="Get-RuleTypeMatchList.WindowsFeatureRule.Should return 'WindowsFeatureRule' when 'Get-WindowsOptionalFeature' is found" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="WmiRule" executed="True" result="Success" success="True" time="0.0767" asserts="0" description="WmiRule">
                <results>
                  <test-case description="Should return 'WmiRule' when 'Disk Management' is found" name="Get-RuleTypeMatchList.WmiRule.Should return 'WmiRule' when 'Disk Management' is found" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return 'WmiRule' when 'Service Pack' is found" name="Get-RuleTypeMatchList.WmiRule.Should return 'WmiRule' when 'Service Pack' is found" time="0.023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="WinEventLogRule" executed="True" result="Success" success="True" time="0.0863" asserts="0" description="WinEventLogRule">
                <results>
                  <test-case description="Should return 'WinEventLogRule' when 'eventvwr.msc and Logs\Microsoft' is found" name="Get-RuleTypeMatchList.WinEventLogRule.Should return 'WinEventLogRule' when 'eventvwr.msc and Logs\Microsoft' is found" time="0.0564" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'WinEventLogRule' when only 'eventvwr.msc' is found" name="Get-RuleTypeMatchList.WinEventLogRule.Should Not return 'WinEventLogRule' when only 'eventvwr.msc' is found" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return 'WinEventLogRule' when only 'Logs\Microsoft' is found" name="Get-RuleTypeMatchList.WinEventLogRule.Should Not return 'WinEventLogRule' when only 'Logs\Microsoft' is found" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\UserRightsAssignmentRuleClass.tests.ps1" executed="True" result="Success" success="True" time="1.3375" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\UserRightsAssignmentRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="UserRightsAssignmentRuleClass Child Class" executed="True" result="Success" success="True" time="0.3899" asserts="0" description="UserRightsAssignmentRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1394" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="UserRightsAssignmentRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1394" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0709" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'DisplayName'" name="UserRightsAssignmentRuleClass Child Class.Class Properties.Should have a property named 'DisplayName'" time="0.0415" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Constant'" name="UserRightsAssignmentRuleClass Child Class.Class Properties.Should have a property named 'Constant'" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Identity'" name="UserRightsAssignmentRuleClass Child Class.Class Properties.Should have a property named 'Identity'" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Force'" name="UserRightsAssignmentRuleClass Child Class.Class Properties.Should have a property named 'Force'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0972" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetDisplayName'" name="UserRightsAssignmentRuleClass Child Class.Class Methods.Should have a method named 'SetDisplayName'" time="0.0588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetConstant'" name="UserRightsAssignmentRuleClass Child Class.Class Methods.Should have a method named 'SetConstant'" time="0.011" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetIdentity'" name="UserRightsAssignmentRuleClass Child Class.Class Methods.Should have a method named 'SetIdentity'" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetForce'" name="UserRightsAssignmentRuleClass Child Class.Class Methods.Should have a method named 'SetForce'" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="UserRightsAssignmentRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Static Methods" executed="True" result="Success" success="True" time="0.0825" asserts="0" description="Static Methods">
                <results>
                  <test-case description="Should have a method named 'HasMultipleRules'" name="UserRightsAssignmentRuleClass Child Class.Static Methods.Should have a method named 'HasMultipleRules'" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SplitMultipleRules'" name="UserRightsAssignmentRuleClass Child Class.Static Methods.Should have a method named 'SplitMultipleRules'" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more static methods than are tested" name="UserRightsAssignmentRuleClass Child Class.Static Methods.Should not have more static methods than are tested" time="0.0214" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-UserRightDisplayName" executed="True" result="Success" success="True" time="0.1749" asserts="0" description="Get-UserRightDisplayName">
            <results>
              <test-case description="Should return Deny access to this computer from the network" name="Get-UserRightDisplayName.Should return Deny access to this computer from the network" time="0.0663" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Access this computer from the network" name="Get-UserRightDisplayName.Should return Access this computer from the network" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Debug programs" name="Get-UserRightDisplayName.Should return Debug programs" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Create a token object" name="Get-UserRightDisplayName.Should return Create a token object" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Access Credential Manager as a trusted caller" name="Get-UserRightDisplayName.Should return Access Credential Manager as a trusted caller" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Deny log on as a service" name="Get-UserRightDisplayName.Should return Deny log on as a service" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Manage auditing and security log" name="Get-UserRightDisplayName.Should return Manage auditing and security log" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Take ownership of files or other objects" name="Get-UserRightDisplayName.Should return Take ownership of files or other objects" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Lock pages in memory" name="Get-UserRightDisplayName.Should return Lock pages in memory" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Deny log on through Remote Desktop Services" name="Get-UserRightDisplayName.Should return Deny log on through Remote Desktop Services" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Deny log on locally" name="Get-UserRightDisplayName.Should return Deny log on locally" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-UserRightConstant" executed="True" result="Success" success="True" time="0.1936" asserts="0" description="Get-UserRightConstant">
            <results>
              <test-case description="Should return SeDenyNetworkLogonRight from Deny access to this computer from the network" name="Get-UserRightConstant.Should return SeDenyNetworkLogonRight from Deny access to this computer from the network" time="0.0569" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeNetworkLogonRight from Access this computer from the network" name="Get-UserRightConstant.Should return SeNetworkLogonRight from Access this computer from the network" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeDebugPrivilege from Debug programs" name="Get-UserRightConstant.Should return SeDebugPrivilege from Debug programs" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeCreateTokenPrivilege from Create a token object" name="Get-UserRightConstant.Should return SeCreateTokenPrivilege from Create a token object" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeTrustedCredManAccessPrivilege from Access Credential Manager as a trusted caller" name="Get-UserRightConstant.Should return SeTrustedCredManAccessPrivilege from Access Credential Manager as a trusted caller" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeDenyServiceLogonRight from Deny log on as a service" name="Get-UserRightConstant.Should return SeDenyServiceLogonRight from Deny log on as a service" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeSecurityPrivilege from Manage auditing and security log" name="Get-UserRightConstant.Should return SeSecurityPrivilege from Manage auditing and security log" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeTakeOwnershipPrivilege from Take ownership of files or other objects" name="Get-UserRightConstant.Should return SeTakeOwnershipPrivilege from Take ownership of files or other objects" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeLockMemoryPrivilege from Lock pages in memory" name="Get-UserRightConstant.Should return SeLockMemoryPrivilege from Lock pages in memory" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeDenyRemoteInteractiveLogonRight from Deny log on through Remote Desktop Services" name="Get-UserRightConstant.Should return SeDenyRemoteInteractiveLogonRight from Deny log on through Remote Desktop Services" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return SeDenyInteractiveLogonRight from Deny log on locally" name="Get-UserRightConstant.Should return SeDenyInteractiveLogonRight from Deny log on locally" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-UserRightIdentity" executed="True" result="Success" success="True" time="0.18" asserts="0" description="Get-UserRightIdentity">
            <results>
              <test-case description="Should return Guests" name="Get-UserRightIdentity.Should return Guests" time="0.0758" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Administrators Authenticated Users Enterprise Domain Controllers" name="Get-UserRightIdentity.Should return Administrators Authenticated Users Enterprise Domain Controllers" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Administrators" name="Get-UserRightIdentity.Should return Administrators" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return NULL" name="Get-UserRightIdentity.Should return NULL" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return NULL" name="Get-UserRightIdentity.Should return NULL" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return NULL" name="Get-UserRightIdentity.Should return NULL" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Administrators" name="Get-UserRightIdentity.Should return Administrators" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Administrators" name="Get-UserRightIdentity.Should return Administrators" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return NULL" name="Get-UserRightIdentity.Should return NULL" time="0.01" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Enterprise Admins Domain Admins Local account Guests" name="Get-UserRightIdentity.Should return Enterprise Admins Domain Admins Local account Guests" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return Enterprise Admins Domain Admins Guests" name="Get-UserRightIdentity.Should return Enterprise Admins Domain Admins Guests" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-SetForceFlag" executed="True" result="Success" success="True" time="0.161" asserts="0" description="Test-SetForceFlag">
            <results>
              <test-case description="Should return False" name="Test-SetForceFlag.Should return False" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-SetForceFlag.Should return True" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False" name="Test-SetForceFlag.Should return False" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False" name="Test-SetForceFlag.Should return False" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-MultipleUserRightsAssignment" executed="True" result="Success" success="True" time="0.0712" asserts="0" description="Test-MultipleUserRightsAssignment">
            <results>
              <test-case description="Should return True if multiple policies settings are found" name="Test-MultipleUserRightsAssignment.Should return True if multiple policies settings are found" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False if multiple policies settings are not found" name="Test-MultipleUserRightsAssignment.Should return False if multiple policies settings are not found" time="0.0185" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Split-MultipleUserRightsAssignment" executed="True" result="Success" success="True" time="0.1668" asserts="0" description="Split-MultipleUserRightsAssignment">
            <results>
              <test-suite type="TestFixture" name="First User Right" executed="True" result="Success" success="True" time="0.1048" asserts="0" description="First User Right">
                <results>
                  <test-case description="Should return the first " name="Split-MultipleUserRightsAssignment.First User Right.Should return the first " time="0.09" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return the second" name="Split-MultipleUserRightsAssignment.First User Right.Should Not return the second" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Second User Right" executed="True" result="Success" success="True" time="0.062" asserts="0" description="Second User Right">
                <results>
                  <test-case description="Should return the second" name="Split-MultipleUserRightsAssignment.Second User Right.Should return the second" time="0.0414" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not return the first" name="Split-MultipleUserRightsAssignment.Second User Right.Should Not return the first" time="0.0206" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WebAppPoolRule.tests.ps1" executed="True" result="Success" success="True" time="0.4662" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WebAppPoolRule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="WebAppPoolRule Child Class" executed="True" result="Success" success="True" time="0.2887" asserts="0" description="WebAppPoolRule Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1426" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="WebAppPoolRule Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1426" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0576" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'Key'" name="WebAppPoolRule Child Class.Class Properties.Should have a property named 'Key'" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Value'" name="WebAppPoolRule Child Class.Class Properties.Should have a property named 'Value'" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0885" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetKeyValuePair'" name="WebAppPoolRule Child Class.Class Methods.Should have a method named 'SetKeyValuePair'" time="0.0579" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsOrganizationalSetting'" name="WebAppPoolRule Child Class.Class Methods.Should have a method named 'IsOrganizationalSetting'" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetOrganizationValueTestString'" name="WebAppPoolRule Child Class.Class Methods.Should have a method named 'SetOrganizationValueTestString'" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="WebAppPoolRule Child Class.Class Methods.Should not have more methods than are tested" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-KeyValuePair" executed="True" result="Success" success="True" time="0.0741" asserts="0" description="Get-KeyValuePair">
            <results>
              <test-case description="Should return rapidFailProtection and $true" name="Get-KeyValuePair.Should return rapidFailProtection and $true" time="0.0741" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-KeyValuePair" executed="True" result="Success" success="True" time="0.0348" asserts="0" description="Get-KeyValuePair">
            <results>
              <test-case description="Should return pingingEnabled and $true" name="Get-KeyValuePair.Should return pingingEnabled and $true" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-OrganizationValueTestString" executed="True" result="Success" success="True" time="0.0687" asserts="0" description="Get-OrganizationValueTestString">
            <results>
              <test-case description="Should return two rules" name="Get-OrganizationValueTestString.Should return two rules" time="0.0687" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WebConfigurationPropertyRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.8513" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WebConfigurationPropertyRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="WebConfigurationPropertyRuleClass Child Class" executed="True" result="Success" success="True" time="0.3022" asserts="0" description="WebConfigurationPropertyRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1091" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="WebConfigurationPropertyRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1091" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.086" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'ConfigSection'" name="WebConfigurationPropertyRuleClass Child Class.Class Properties.Should have a property named 'ConfigSection'" time="0.0623" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Key'" name="WebConfigurationPropertyRuleClass Child Class.Class Properties.Should have a property named 'Key'" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Value'" name="WebConfigurationPropertyRuleClass Child Class.Class Properties.Should have a property named 'Value'" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1071" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetConfigSection'" name="WebConfigurationPropertyRuleClass Child Class.Class Methods.Should have a method named 'SetConfigSection'" time="0.051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetKeyValuePair'" name="WebConfigurationPropertyRuleClass Child Class.Class Methods.Should have a method named 'SetKeyValuePair'" time="0.0178" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'IsOrganizationalSetting'" name="WebConfigurationPropertyRuleClass Child Class.Class Methods.Should have a method named 'IsOrganizationalSetting'" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetOrganizationValueTestString'" name="WebConfigurationPropertyRuleClass Child Class.Class Methods.Should have a method named 'SetOrganizationValueTestString'" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="WebConfigurationPropertyRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ConfigSection" executed="True" result="Success" success="True" time="0.0734" asserts="0" description="Get-ConfigSection">
            <results>
              <test-case description="Should return /system.webServer/directoryBrowse" name="Get-ConfigSection.Should return /system.webServer/directoryBrowse" time="0.0734" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-KeyValuePair" executed="True" result="Success" success="True" time="0.0826" asserts="0" description="Get-KeyValuePair">
            <results>
              <test-case description="Should return enabled and false" name="Get-KeyValuePair.Should return enabled and false" time="0.0826" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ConfigSection" executed="True" result="Success" success="True" time="0.0809" asserts="0" description="Get-ConfigSection">
            <results>
              <test-case description="Should return /system.web/sessionState" name="Get-ConfigSection.Should return /system.web/sessionState" time="0.0809" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-KeyValuePair" executed="True" result="Success" success="True" time="0.0765" asserts="0" description="Get-KeyValuePair">
            <results>
              <test-case description="Should return cookieless and UseURI" name="Get-KeyValuePair.Should return cookieless and UseURI" time="0.0765" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-MultipleWebConfigurationPropertyRule" executed="True" result="Success" success="True" time="0.0962" asserts="0" description="Test-MultipleWebConfigurationPropertyRule">
            <results>
              <test-case description="Should return False" name="Test-MultipleWebConfigurationPropertyRule.Should return False" time="0.07" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return False" name="Test-MultipleWebConfigurationPropertyRule.Should return False" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return True" name="Test-MultipleWebConfigurationPropertyRule.Should return True" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Split-MultipleWebConfigurationPropertyRule" executed="True" result="Success" success="True" time="0.0833" asserts="0" description="Split-MultipleWebConfigurationPropertyRule">
            <results>
              <test-case description="Should return two rules" name="Split-MultipleWebConfigurationPropertyRule.Should return two rules" time="0.0833" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-OrganizationValueTestString" executed="True" result="Success" success="True" time="0.0563" asserts="0" description="Get-OrganizationValueTestString">
            <results>
              <test-case description="Should return two rules" name="Get-OrganizationValueTestString.Should return two rules" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WindowsFeatureRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.5489" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WindowsFeatureRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="WindowsFeatureRuleClass Child Class" executed="True" result="Success" success="True" time="0.3292" asserts="0" description="WindowsFeatureRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1176" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="WindowsFeatureRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1176" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0586" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'FeatureName'" name="WindowsFeatureRuleClass Child Class.Class Properties.Should have a property named 'FeatureName'" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'InstallState'" name="WindowsFeatureRuleClass Child Class.Class Properties.Should have a property named 'InstallState'" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1529" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetFeatureName'" name="WindowsFeatureRuleClass Child Class.Class Methods.Should have a method named 'SetFeatureName'" time="0.1292" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetFeatureInstallState'" name="WindowsFeatureRuleClass Child Class.Class Methods.Should have a method named 'SetFeatureInstallState'" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="WindowsFeatureRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-WindowsFeatureName" executed="True" result="Success" success="True" time="0.1142" asserts="0" description="Get-WindowsFeatureName">
            <results>
              <test-case description="Should return 'SMB1Protocol'" name="Get-WindowsFeatureName.Should return 'SMB1Protocol'" time="0.069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'MicrosoftWindowsPowerShellV2,MicrosoftWindowsPowerShellV2Root'" name="Get-WindowsFeatureName.Should return 'MicrosoftWindowsPowerShellV2,MicrosoftWindowsPowerShellV2Root'" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'SMB1Protocol'" name="Get-WindowsFeatureName.Should return 'SMB1Protocol'" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'SNMP'" name="Get-WindowsFeatureName.Should return 'SNMP'" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'SimpleTCP'" name="Get-WindowsFeatureName.Should return 'SimpleTCP'" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-FeatureInstallState" executed="True" result="Success" success="True" time="0.1054" asserts="0" description="Get-FeatureInstallState">
            <results>
              <test-case description="Should return 'Absent'" name="Get-FeatureInstallState.Should return 'Absent'" time="0.0616" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Absent'" name="Get-FeatureInstallState.Should return 'Absent'" time="0.0153" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Absent'" name="Get-FeatureInstallState.Should return 'Absent'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Absent'" name="Get-FeatureInstallState.Should return 'Absent'" time="0.011" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return 'Absent'" name="Get-FeatureInstallState.Should return 'Absent'" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WinEventLogRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.4213" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WinEventLogRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="WinEventLogRuleClass Child Class" executed="True" result="Success" success="True" time="0.3202" asserts="0" description="WinEventLogRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1333" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="WinEventLogRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1333" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.0785" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'LogName'" name="WinEventLogRuleClass Child Class.Class Properties.Should have a property named 'LogName'" time="0.0664" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'IsEnabled'" name="WinEventLogRuleClass Child Class.Class Properties.Should have a property named 'IsEnabled'" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.1084" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should have a method named 'SetWinEventLogName'" name="WinEventLogRuleClass Child Class.Class Methods.Should have a method named 'SetWinEventLogName'" time="0.0686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a method named 'SetWinEventLogIsEnabled'" name="WinEventLogRuleClass Child Class.Class Methods.Should have a method named 'SetWinEventLogIsEnabled'" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have more methods than are tested" name="WinEventLogRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-DnsServerWinEventLogName" executed="True" result="Success" success="True" time="0.1011" asserts="0" description="Get-DnsServerWinEventLogName">
            <results>
              <test-case description="Should return 'Microsoft-Windows-DnsServer/Analytical'" name="Get-DnsServerWinEventLogName.Should return 'Microsoft-Windows-DnsServer/Analytical'" time="0.1011" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WmiRuleClass.tests.ps1" executed="True" result="Success" success="True" time="0.3684" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\Class\WmiRuleClass.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="WmiRuleClass Child Class" executed="True" result="Success" success="True" time="0.3684" asserts="0" description="WmiRuleClass Child Class">
            <results>
              <test-suite type="TestFixture" name="Base Class" executed="True" result="Success" success="True" time="0.1595" asserts="0" description="Base Class">
                <results>
                  <test-case description="Shoud have a BaseType of STIG" name="WmiRuleClass Child Class.Base Class.Shoud have a BaseType of STIG" time="0.1595" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Properties" executed="True" result="Success" success="True" time="0.1098" asserts="0" description="Class Properties">
                <results>
                  <test-case description="Should have a property named 'Class'" name="WmiRuleClass Child Class.Class Properties.Should have a property named 'Class'" time="0.0679" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Property'" name="WmiRuleClass Child Class.Class Properties.Should have a property named 'Property'" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Value'" name="WmiRuleClass Child Class.Class Properties.Should have a property named 'Value'" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a property named 'Operator'" name="WmiRuleClass Child Class.Class Properties.Should have a property named 'Operator'" time="0.0171" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Class Methods" executed="True" result="Success" success="True" time="0.0991" asserts="0" description="Class Methods">
                <results>
                  <test-case description="Should not have more methods than are tested" name="WmiRuleClass Child Class.Class Methods.Should not have more methods than are tested" time="0.0991" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\data.tests.ps1" executed="True" result="Success" success="True" time="1.3344" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\data.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="UserRightNameToConstant Data Section" executed="True" result="Success" success="True" time="0.268" asserts="0" description="UserRightNameToConstant Data Section">
            <results>
              <test-case description="should have a data section called UserRightNameToConstant" name="UserRightNameToConstant Data Section.should have a data section called UserRightNameToConstant" time="0.268" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="auditPolicySubcategories Data Section" executed="True" result="Success" success="True" time="0.0637" asserts="0" description="auditPolicySubcategories Data Section">
            <results>
              <test-case description="should have a data section called auditPolicySubcategories" name="auditPolicySubcategories Data Section.should have a data section called auditPolicySubcategories" time="0.0637" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="RegularExpression Data Section" executed="True" result="Success" success="True" time="0.8469" asserts="0" description="RegularExpression Data Section">
            <results>
              <test-suite type="TestFixture" name="Hex Code" executed="True" result="Success" success="True" time="0.1042" asserts="0" description="Hex Code">
                <results>
                  <test-case description="Should match a hexcode" name="RegularExpression Data Section.Hex Code.Should match a hexcode" time="0.0777" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should NOT match nonhexcode" name="RegularExpression Data Section.Hex Code.Should NOT match nonhexcode" time="0.0265" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Leading Integer Unbound" executed="True" result="Success" success="True" time="0" asserts="0" description="Leading Integer Unbound">
                <results />
              </test-suite>
              <test-suite type="TestFixture" name="Text Between Quotes" executed="True" result="Success" success="True" time="0.1897" asserts="0" description="Text Between Quotes">
                <results>
                  <test-case description="Should match string with double quotes" name="RegularExpression Data Section.Text Between Quotes.Should match string with double quotes" time="0.158" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match string with single quotes" name="RegularExpression Data Section.Text Between Quotes.Should match string with single quotes" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Blank String" executed="True" result="Success" success="True" time="0.083" asserts="0" description="Blank String">
                <results>
                  <test-case description="Should match '(Blank)' literal string" name="RegularExpression Data Section.Blank String.Should match '(Blank)' literal string" time="0.083" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Enabled or Disabled String" executed="True" result="Success" success="True" time="0.1099" asserts="0" description="Enabled or Disabled String">
                <results>
                  <test-case description="Should match the exact string 'Enabled'" name="RegularExpression Data Section.Enabled or Disabled String.Should match the exact string 'Enabled'" time="0.0906" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the exact string 'enabled'" name="RegularExpression Data Section.Enabled or Disabled String.Should match the exact string 'enabled'" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the exact string 'Disabled'" name="RegularExpression Data Section.Enabled or Disabled String.Should match the exact string 'Disabled'" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the exact string 'disabled'" name="RegularExpression Data Section.Enabled or Disabled String.Should match the exact string 'disabled'" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Audit Policy" executed="True" result="Success" success="True" time="0.1157" asserts="0" description="Audit Policy">
                <results>
                  <test-case description="Should match the exact string 'Success'" name="RegularExpression Data Section.Audit Policy.Should match the exact string 'Success'" time="0.0552" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the exact string 'success'" name="RegularExpression Data Section.Audit Policy.Should match the exact string 'success'" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the exact string 'Failure'" name="RegularExpression Data Section.Audit Policy.Should match the exact string 'Failure'" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the exact string 'failure'" name="RegularExpression Data Section.Audit Policy.Should match the exact string 'failure'" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the string 'Catagory -&gt; Sub Category - Flag'" name="RegularExpression Data Section.Audit Policy.Should match the string 'Catagory -&gt; Sub Category - Flag'" time="0.0228" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match the string 'Catagory &gt;&gt; Sub Category - Flag'" name="RegularExpression Data Section.Audit Policy.Should match the string 'Catagory &gt;&gt; Sub Category - Flag'" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TextBetweenParentheses string matches" executed="True" result="Success" success="True" time="0.1497" asserts="0" description="TextBetweenParentheses string matches">
                <results>
                  <test-case description="Should match string inside parentheses" name="RegularExpression Data Section.TextBetweenParentheses string matches.Should match string inside parentheses" time="0.0802" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should NOT match text outside of parentheses" name="RegularExpression Data Section.TextBetweenParentheses string matches.Should NOT match text outside of parentheses" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should NOT match text inside improperly written parentheses" name="RegularExpression Data Section.TextBetweenParentheses string matches.Should NOT match text inside improperly written parentheses" time="0.0298" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return text inside of parentheses when grabbing the last group" name="RegularExpression Data Section.TextBetweenParentheses string matches.Should return text inside of parentheses when grabbing the last group" time="0.02" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Should have a data section called RegularExpression" name="RegularExpression Data Section.Should have a data section called RegularExpression" time="0.0947" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="rangeMatch Data Section" executed="True" result="Success" success="True" time="0.0573" asserts="0" description="rangeMatch Data Section">
            <results>
              <test-case description="should have a data section called rangeMatch" name="rangeMatch Data Section.should have a data section called rangeMatch" time="0.0573" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="errorMessage Data Section" executed="True" result="Success" success="True" time="0.0463" asserts="0" description="errorMessage Data Section">
            <results>
              <test-case description="should have a data section called errorMessage" name="errorMessage Data Section.should have a data section called errorMessage" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ADAuditPath Data Section" executed="True" result="Success" success="True" time="0.0522" asserts="0" description="ADAuditPath Data Section">
            <results>
              <test-case description="should have a data section called ADAuditPath" name="ADAuditPath Data Section.should have a data section called ADAuditPath" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\enum.tests.ps1" executed="True" result="Success" success="True" time="0.5537" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\enum.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Status Enumeration" executed="True" result="Success" success="True" time="0.1371" asserts="0" description="Status Enumeration">
            <results>
              <test-case description="pass should exist" name="Status Enumeration.pass should exist" time="0.1256" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="warn should exist" name="Status Enumeration.warn should exist" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="fail should exist" name="Status Enumeration.fail should exist" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="RuleType Enumeration" executed="True" result="Success" success="True" time="0.2098" asserts="0" description="RuleType Enumeration">
            <results>
              <test-case description="AccountPolicyRule should exist" name="RuleType Enumeration.AccountPolicyRule should exist" time="0.0244" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AuditPolicyRule should exist" name="RuleType Enumeration.AuditPolicyRule should exist" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DnsServerRootHintRule should exist" name="RuleType Enumeration.DnsServerRootHintRule should exist" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DnsServerSettingRule should exist" name="RuleType Enumeration.DnsServerSettingRule should exist" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DocumentRule should exist" name="RuleType Enumeration.DocumentRule should exist" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="GroupRule should exist" name="RuleType Enumeration.GroupRule should exist" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="IisLoggingRule should exist" name="RuleType Enumeration.IisLoggingRule should exist" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ManualRule should exist" name="RuleType Enumeration.ManualRule should exist" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="MimeTypeRule should exist" name="RuleType Enumeration.MimeTypeRule should exist" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="PermissionRule should exist" name="RuleType Enumeration.PermissionRule should exist" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ProcessMitigationRule should exist" name="RuleType Enumeration.ProcessMitigationRule should exist" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="RegistryRule should exist" name="RuleType Enumeration.RegistryRule should exist" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SecurityOptionRule should exist" name="RuleType Enumeration.SecurityOptionRule should exist" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ServiceRule should exist" name="RuleType Enumeration.ServiceRule should exist" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SqlScriptRule should exist" name="RuleType Enumeration.SqlScriptRule should exist" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="UserRightRule should exist" name="RuleType Enumeration.UserRightRule should exist" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="WebAppPoolRule should exist" name="RuleType Enumeration.WebAppPoolRule should exist" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="WebConfigurationPropertyRule should exist" name="RuleType Enumeration.WebConfigurationPropertyRule should exist" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="WindowsFeatureRule should exist" name="RuleType Enumeration.WindowsFeatureRule should exist" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="WinEventLogRule should exist" name="RuleType Enumeration.WinEventLogRule should exist" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="WmiRule should exist" name="RuleType Enumeration.WmiRule should exist" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ensure Enumeration" executed="True" result="Success" success="True" time="0.049" asserts="0" description="ensure Enumeration">
            <results>
              <test-case description="Present should exist" name="ensure Enumeration.Present should exist" time="0.042" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Absent should exist" name="ensure Enumeration.Absent should exist" time="0.007" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Severity Enumeration" executed="True" result="Success" success="True" time="0.0427" asserts="0" description="Severity Enumeration">
            <results>
              <test-case description="low should exist" name="Severity Enumeration.low should exist" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="medium should exist" name="Severity Enumeration.medium should exist" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="high should exist" name="Severity Enumeration.high should exist" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Process Enumeration" executed="True" result="Success" success="True" time="0.0492" asserts="0" description="Process Enumeration">
            <results>
              <test-case description="auto should exist" name="Process Enumeration.auto should exist" time="0.0418" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="manual should exist" name="Process Enumeration.manual should exist" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Enum coverage" executed="True" result="Success" success="True" time="0.0659" asserts="0" description="Enum coverage">
            <results>
              <test-case description="Should have tested 5 enum's" name="Enum coverage.Should have tested 5 enum's" time="0.0659" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\main.dscXml.tests.ps1" executed="True" result="Inconclusive" success="True" time="0.1442" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\main.dscXml.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-DscStigXml" executed="True" result="Inconclusive" success="True" time="0.1442" asserts="0" description="ConvertTo-DscStigXml">
            <results>
              <test-case description="Should have a synopsis in the help" name="ConvertTo-DscStigXml.Should have a synopsis in the help" time="0.1413" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should throw an error when given bad xml" name="ConvertTo-DscStigXml.Should throw an error when given bad xml" time="0.0029" asserts="0" success="True" result="Inconclusive" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\main.report.tests.ps1" executed="True" result="Success" success="True" time="0.3301" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\main.report.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-ConversionReport" executed="True" result="Success" success="True" time="0.3301" asserts="0" description="Get-ConversionReport">
            <results>
              <test-case description="Should have a synopsis in the help" name="Get-ConversionReport.Should have a synopsis in the help" time="0.1137" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return an array" name="Get-ConversionReport.Should return an array" time="0.1203" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should contain a RuleType member" name="Get-ConversionReport.Should contain a RuleType member" time="0.0277" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should contain a Count member" name="Get-ConversionReport.Should contain a Count member" time="0.0344" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should contain a Errors member" name="Get-ConversionReport.Should contain a Errors member" time="0.034" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\main.xccdfXml.tests.ps1" executed="True" result="Success" success="True" time="0.4963" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\common\main.xccdfXml.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertFrom-StigXccdf" executed="True" result="Success" success="True" time="0" asserts="0" description="ConvertFrom-StigXccdf">
            <results />
          </test-suite>
          <test-suite type="TestFixture" name="Split-StigXccdf" executed="True" result="Success" success="True" time="0.4963" asserts="0" description="Split-StigXccdf">
            <results>
              <test-suite type="TestFixture" name="Member Server" executed="True" result="Success" success="True" time="0.3462" asserts="0" description="Member Server">
                <results>
                  <test-case description="Should split a Windows Server 2016 STIG into an MS stig files" name="Split-StigXccdf.Member Server.Should split a Windows Server 2016 STIG into an MS stig files" time="0.2988" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have a Domain Controller only setting" name="Split-StigXccdf.Member Server.Should not have a Domain Controller only setting" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Domain Controller" executed="True" result="Success" success="True" time="0.1501" asserts="0" description="Domain Controller">
                <results>
                  <test-case description="Should split a Windows Server 2016 STIG into an DC stig files" name="Split-StigXccdf.Domain Controller.Should split a Windows Server 2016 STIG into an DC stig files" time="0.1078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not have a Member Server only setting" name="Split-StigXccdf.Domain Controller.Should not have a Member Server only setting" time="0.0423" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\data\data.Registry.tests.ps1" executed="True" result="Success" success="True" time="0.9783" asserts="0" description="C:\Users\adamh\source\repos\PowerSTIG\PowerStigConvert\tests\unit\public\data\data.Registry.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="DscRegistryValueType Data Section" executed="True" result="Success" success="True" time="0.3882" asserts="0" description="DscRegistryValueType Data Section">
            <results>
              <test-case description="'REG_BINARY' should exist and return 'Binary'" name="DscRegistryValueType Data Section.'REG_BINARY' should exist and return 'Binary'" time="0.2258" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="'REG_MULTI_SZ' should exist and return 'MultiString'" name="DscRegistryValueType Data Section.'REG_MULTI_SZ' should exist and return 'MultiString'" time="0.028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="'Does Not Exist' should exist and return 'Does Not Exist'" name="DscRegistryValueType Data Section.'Does Not Exist' should exist and return 'Does Not Exist'" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="'REG_QWORD' should exist and return 'Qword'" name="DscRegistryValueType Data Section.'REG_QWORD' should exist and return 'Qword'" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="'REG_EXPAND_SZ' should exist and return 'ExpandableString'" name="DscRegistryValueType Data Section.'REG_EXPAND_SZ' should exist and return 'ExpandableString'" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="'REG_DWORD' should exist and return 'Dword'" name="DscRegistryValueType Data Section.'REG_DWORD' should exist and return 'Dword'" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="'REG_SZ' should exist and return 'String'" name="DscRegistryValueType Data Section.'REG_SZ' should exist and return 'String'" time="0.0211" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="RegistryRegularExpression Data Section" executed="True" result="Success" success="True" time="0.5901" asserts="0" description="RegistryRegularExpression Data Section">
            <results>
              <test-suite type="TestFixture" name="Hive Match" executed="True" result="Success" success="True" time="0.1665" asserts="0" description="Hive Match">
                <results>
                  <test-case description="Should match 'Hive:HKEY_LOCAL_MACHINE'" name="RegistryRegularExpression Data Section.Hive Match.Should match 'Hive:HKEY_LOCAL_MACHINE'" time="0.142" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match 'Hive: HKEY_LOCAL_MACHINE'" name="RegistryRegularExpression Data Section.Hive Match.Should match 'Hive: HKEY_LOCAL_MACHINE'" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match 'Registry Hive:HKEY_LOCAL_MACHINE'" name="RegistryRegularExpression Data Section.Hive Match.Should match 'Registry Hive:HKEY_LOCAL_MACHINE'" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match 'Registry Hive: HKEY_LOCAL_MACHINE'" name="RegistryRegularExpression Data Section.Hive Match.Should match 'Registry Hive: HKEY_LOCAL_MACHINE'" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Path Match" executed="True" result="Success" success="True" time="0.0941" asserts="0" description="Path Match">
                <results>
                  <test-case description="Should match 'SubKey : \Path\To\RegistryValue'" name="RegistryRegularExpression Data Section.Path Match.Should match 'SubKey : \Path\To\RegistryValue'" time="0.0858" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match 'Registry Path :\Path\To\RegistryValue'" name="RegistryRegularExpression Data Section.Path Match.Should match 'Registry Path :\Path\To\RegistryValue'" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Type Match" executed="True" result="Success" success="True" time="0.138" asserts="0" description="Type Match">
                <results>
                  <test-case description="Should match 'Type:REG_SZ'" name="RegistryRegularExpression Data Section.Type Match.Should match 'Type:REG_SZ'" time="0.0586" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match 'Type: REG_BINARY'" name="RegistryRegularExpression Data Section.Type Match.Should match 'Type: REG_BINARY'" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match '  Type:  REG_DWORD'" name="RegistryRegularExpression Data Section.Type Match.Should match '  Type:  REG_DWORD'" time="0.0369" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match ' Type: REG_QWORD'" name="RegistryRegularExpression Data Section.Type Match.Should match ' Type: REG_QWORD'" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match 'Type: REG_MULTI_SZ '" name="RegistryRegularExpression Data Section.Type Match.Should match 'Type: REG_MULTI_SZ '" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should match 'Type:  REG_EXPAND_SZ'" name="RegistryRegularExpression Data Section.Type Match.Should match 'Type:  REG_EXPAND_SZ'" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ValueName Match" executed="True" result="Success" success="True" time="0.0726" asserts="0" description="ValueName Match">
                <results>
                  <test-case description="Should match 'Value Name : SettingName'" name="RegistryRegularExpression Data Section.ValueName Match.Should match 'Value Name : SettingName'" time="0.0726" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ValueData Match" executed="True" result="Success" success="True" time="0.0708" asserts="0" description="ValueData Match">
                <results>
                  <test-case description="Should match 'Value : 1'" name="RegistryRegularExpression Data Section.ValueData Match.Should match 'Value : 1'" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not match 'The policy referenced configures the following registry value:'" name="RegistryRegularExpression Data Section.ValueData Match.Should not match 'The policy referenced configures the following registry value:'" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Value Data Range Match" executed="True" result="Success" success="True" time="0.0481" asserts="0" description="Value Data Range Match">
                <results>
                  <test-case description="Should match 'Possible values are'" name="RegistryRegularExpression Data Section.Value Data Range Match.Should match 'Possible values are'" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>